/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package business;

import business.MessageForm;
import daoimpl.BrokerDAOImpl;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.Timestamp;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableRowSorter;
import models.BrokerModel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Lenovo
 */
public class BrokerFrame extends javax.swing.JFrame {

    /**
     * Creates new form BrokerFrame
     */
    public BrokerFrame() {
        initComponents();
        populateBrokerTable();
        disableButtons(1);
        brokerNameField.requestFocus();
        this.setLocationRelativeTo(null);
        brokerTable.setDefaultEditor(Object.class, null);
        this.setExtendedState(BrokerFrame.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DeletePopupMenu = new javax.swing.JPopupMenu();
        deleteMenu = new javax.swing.JMenuItem();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        brokerNameField = new javax.swing.JTextField();
        brokerTypeField = new javax.swing.JComboBox<>();
        addBrokerButton = new javax.swing.JLabel();
        updateBrokerButton = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrolPane = new javax.swing.JScrollPane();
        brokerTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        searchBrokerField = new javax.swing.JTextField();
        clearFieldButton = new javax.swing.JLabel();
        brokerContactField = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();

        deleteMenu.setText("Delete Row");
        deleteMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMenuActionPerformed(evt);
            }
        });
        DeletePopupMenu.add(deleteMenu);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPanel2KeyPressed(evt);
            }
        });
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel2.setText("Broker Name : ");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, -1, 35));

        jLabel4.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel4.setText("Contact No :");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 200, 120, 40));

        jLabel5.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel5.setText("Broker Type :");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 280, 120, 40));

        brokerNameField.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        brokerNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                brokerNameFieldKeyReleased(evt);
            }
        });
        jPanel2.add(brokerNameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 120, 280, 40));

        brokerTypeField.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        brokerTypeField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Broker Type", "Seller", "Buyer" }));
        brokerTypeField.setToolTipText("Select Broker Type");
        jPanel2.add(brokerTypeField, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 280, 280, 40));

        addBrokerButton.setBackground(new java.awt.Color(140, 198, 62));
        addBrokerButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        addBrokerButton.setForeground(new java.awt.Color(255, 255, 255));
        addBrokerButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addBrokerButton.setText("Add Broker");
        addBrokerButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addBrokerButton.setOpaque(true);
        addBrokerButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addBrokerButtonMouseClicked(evt);
            }
        });
        jPanel2.add(addBrokerButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 410, 200, 40));

        updateBrokerButton.setBackground(new java.awt.Color(140, 198, 62));
        updateBrokerButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        updateBrokerButton.setForeground(new java.awt.Color(255, 255, 255));
        updateBrokerButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        updateBrokerButton.setText("Update Broker");
        updateBrokerButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        updateBrokerButton.setOpaque(true);
        updateBrokerButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateBrokerButtonMouseClicked(evt);
            }
        });
        jPanel2.add(updateBrokerButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 410, 190, 40));

        jLabel8.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel8.setText("Broker Record");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 80, -1, -1));

        brokerTable.setAutoCreateRowSorter(true);
        brokerTable.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        brokerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        brokerTable.setRowHeight(20);
        brokerTable.setSelectionBackground(new java.awt.Color(0, 0, 0));
        brokerTable.setSelectionForeground(new java.awt.Color(140, 168, 62));
        brokerTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                brokerTableMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                brokerTableMouseReleased(evt);
            }
        });
        brokerTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                brokerTableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                brokerTableKeyReleased(evt);
            }
        });
        jScrolPane.setViewportView(brokerTable);

        jPanel2.add(jScrolPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 110, 840, 540));

        jLabel6.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Search Broker");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 60, 130, 40));

        searchBrokerField.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        searchBrokerField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBrokerFieldActionPerformed(evt);
            }
        });
        searchBrokerField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchBrokerFieldKeyReleased(evt);
            }
        });
        jPanel2.add(searchBrokerField, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 60, 370, 40));

        clearFieldButton.setBackground(new java.awt.Color(140, 198, 62));
        clearFieldButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        clearFieldButton.setForeground(new java.awt.Color(255, 255, 255));
        clearFieldButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        clearFieldButton.setText("Clear");
        clearFieldButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        clearFieldButton.setOpaque(true);
        clearFieldButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearFieldButtonMouseClicked(evt);
            }
        });
        jPanel2.add(clearFieldButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 470, 410, 40));

        brokerContactField.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        brokerContactField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                brokerContactFieldKeyTyped(evt);
            }
        });
        jPanel2.add(brokerContactField, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 200, 280, 40));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 1370, 680));

        jPanel3.setBackground(new java.awt.Color(0, 0, 0));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("X");
        jLabel3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1310, 10, 30, 40));

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(140, 198, 62));
        jLabel1.setText("Broker");
        jPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(594, 11, -1, -1));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1370, 60));

        jMenuBar1.setBackground(new java.awt.Color(0, 0, 0));

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Add");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Update");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Delete");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Reset");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("Back");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setText("Exit");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addBrokerButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addBrokerButtonMouseClicked
        if(addBrokerButton.isEnabled())
        {
          addBroker();  
        }
    }//GEN-LAST:event_addBrokerButtonMouseClicked

    private void brokerTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_brokerTableMouseClicked
        getSelectedRow();
    }//GEN-LAST:event_brokerTableMouseClicked

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        this.dispose();
    }//GEN-LAST:event_jLabel3MouseClicked

    private void searchBrokerFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchBrokerFieldKeyReleased
        String txt = searchBrokerField.getText().toString();
        TableRowSorter trs = new TableRowSorter(brokerTable.getModel());
        brokerTable.setRowSorter(trs);       
        trs.setRowFilter(RowFilter.regexFilter("(?i)"+txt));
    }//GEN-LAST:event_searchBrokerFieldKeyReleased

    private void brokerTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_brokerTableMouseReleased
        if (evt.isPopupTrigger()) {
           DeletePopupMenu.show(brokerTable, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_brokerTableMouseReleased

    private void searchBrokerFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBrokerFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchBrokerFieldActionPerformed

    private void deleteMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMenuActionPerformed
        deleteBroker();
    }//GEN-LAST:event_deleteMenuActionPerformed

    private void updateBrokerButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateBrokerButtonMouseClicked
        if(updateBrokerButton.isEnabled())
        {
            updateBroker();
        }
    }//GEN-LAST:event_updateBrokerButtonMouseClicked

    private void clearFieldButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearFieldButtonMouseClicked
        clearAllFields();
        disableButtons(1);
    }//GEN-LAST:event_clearFieldButtonMouseClicked

    private void brokerContactFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_brokerContactFieldKeyTyped
        char ch = evt.getKeyChar();
        if(Character.isAlphabetic(ch) || Character.isWhitespace(ch))
        {
            evt.consume();
        }
    }//GEN-LAST:event_brokerContactFieldKeyTyped

    private void brokerNameFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_brokerNameFieldKeyReleased
        if(evt.getKeyCode()==9)
        {
            brokerContactField.requestFocus();
        }
    }//GEN-LAST:event_brokerNameFieldKeyReleased

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        if(addBrokerButton.isEnabled()){
            addBroker();
        }

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        if(updateBrokerButton.isEnabled()){
           if(brokerTable.getSelectedRow()>-1)
            {
                updateBroker();
            }else{
                new MessageForm("Error","Please select row to update.","error.png").setVisible(true);
            } 
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        if(brokerTable.getSelectedRow()>-1)
        {
            deleteBroker();
        }else{
            new MessageForm("Error","Please select row to delete.","error.png").setVisible(true);
        }
        
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        clearAllFields();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void brokerTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_brokerTableKeyPressed
       
    }//GEN-LAST:event_brokerTableKeyPressed

    private void jPanel2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPanel2KeyPressed
       
    }//GEN-LAST:event_jPanel2KeyPressed

    private void brokerTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_brokerTableKeyReleased
        if(evt.getKeyCode()==38 || evt.getKeyCode()==40)
        {
            getSelectedRow();
        }
        else if(evt.getKeyCode()==37)
        {
            System.out.println("Left Pressed");
            brokerNameField.requestFocusInWindow();
        }
    }//GEN-LAST:event_brokerTableKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BrokerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BrokerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BrokerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BrokerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BrokerFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPopupMenu DeletePopupMenu;
    private javax.swing.JLabel addBrokerButton;
    private javax.swing.JTextField brokerContactField;
    private javax.swing.JTextField brokerNameField;
    private javax.swing.JTable brokerTable;
    private javax.swing.JComboBox<String> brokerTypeField;
    private javax.swing.JLabel clearFieldButton;
    private javax.swing.JMenuItem deleteMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrolPane;
    private javax.swing.JTextField searchBrokerField;
    private javax.swing.JLabel updateBrokerButton;
    // End of variables declaration//GEN-END:variables

    private void populateBrokerTable() {
        ResultSet resultSet = new BrokerDAOImpl().viewAllBrokers();
        brokerTable.setModel(DbUtils.resultSetToTableModel(resultSet));
        
        brokerTable.getColumnModel().getColumn(0).setWidth(0);
        brokerTable.getColumnModel().getColumn(0).setMinWidth(0);
        brokerTable.getColumnModel().getColumn(0).setMaxWidth(0);
        
        DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
        headerRenderer.setBackground(new Color(11, 18, 29));
        headerRenderer.setForeground(new Color(140, 198, 62));

        for (int i = 0; i < brokerTable.getModel().getColumnCount(); i++) {
            brokerTable.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
        brokerTable.setShowHorizontalLines(true);
        brokerTable.setShowVerticalLines(true);
        this.getContentPane().setBackground(Color.WHITE);
        jScrolPane.getViewport().setBackground(Color.WHITE);
    }

    private void clearAllFields() {
        brokerNameField.setText("");
        brokerContactField.setText("");
        brokerTypeField.setSelectedIndex(0);
        brokerTable.clearSelection();
    }

    private void disableButtons(Integer i) {
        if(i==0)
        {
            addBrokerButton.setEnabled(false);
            updateBrokerButton.setEnabled(true);
        }else if(i==1){
            addBrokerButton.setEnabled(true);
            updateBrokerButton.setEnabled(false);
        }
    }

    private void updateBroker() {
        if(brokerTable.getSelectedRow()<0)
        {
            new MessageForm("Error","Please select row to update.","error.png").setVisible(true);
        }else if(brokerNameField.getText().trim().equals("") || brokerContactField.getText().trim().equals("") || brokerTypeField.getSelectedIndex()==0)
        {
            new MessageForm("Error","Please fill all fileds to update record.","error.png").setVisible(true);
        }else{
            Integer brokerId = (Integer) brokerTable.getValueAt(brokerTable.getSelectedRow(), 0);
            BrokerModel brokerModel = new BrokerModel();
            brokerModel.setBrokerName(brokerNameField.getText());
            brokerModel.setBrokerContact(brokerContactField.getText());
            brokerModel.setBrokerType(brokerTypeField.getSelectedItem().toString());
            Timestamp currentTime = new Timestamp(System.currentTimeMillis());
            brokerModel.setBrokerId(brokerId);
            brokerModel.setModifiedDate(currentTime);
            boolean check = new BrokerDAOImpl().updateBroker(brokerModel);
            System.out.println(check);
            if(check)
            {
                new MessageForm("Error", "Record could not be updated try again.","error.png").setVisible(true); 
            }else{
                new MessageForm("Success", "Record has been updated.","info.png").setVisible(true);
                clearAllFields();
                populateBrokerTable();
                disableButtons(1);
            }
        }
    }

    private void deleteBroker() {
        if(brokerTable.getSelectedRow()>0)
        {
            Integer brokerId = (Integer) brokerTable.getValueAt(brokerTable.getSelectedRow(), 0);
        BrokerModel brokerModel = new BrokerModel();
        brokerModel.setBrokerId(brokerId);
        Timestamp modifiedDate = new Timestamp(System.currentTimeMillis());
        brokerModel.setModifiedDate(modifiedDate);
        boolean row = new BrokerDAOImpl().deleteBrokerById(brokerModel);
        if (row) {
            new MessageForm("Error","Could not delete record,try again.","error.png").setVisible(true);
        } else {
            new MessageForm("Success","Record has been deleted successfully.","info.png").setVisible(true);
            populateBrokerTable();
            clearAllFields();
            disableButtons(1);
        }
        }
    }

    private void addBroker() {
        if(brokerNameField.getText().trim().equals("") || brokerContactField.getText().trim().equals("") || brokerTypeField.getSelectedIndex()==0)
        {
            new MessageForm("Error","Please fill all fileds to add record.","error.png").setVisible(true);
        }else{
            BrokerModel brokerModel = new BrokerModel();
            brokerModel.setBrokerName(brokerNameField.getText());
            brokerModel.setBrokerContact(brokerContactField.getText());
            brokerModel.setBrokerType(brokerTypeField.getSelectedItem().toString());
            Timestamp currentTime = new Timestamp(System.currentTimeMillis());
            brokerModel.setCreatedDate(currentTime);
            brokerModel.setModifiedDate(currentTime);
            boolean check = new BrokerDAOImpl().addBroker(brokerModel);
            if(check)
            {
                new MessageForm("Error", "Record could not be added try again.","error.png").setVisible(true); 
            }else{
                new MessageForm("Success", "Record has been added.","info.png").setVisible(true);
                clearAllFields();
                populateBrokerTable();
            }
        }
    }

    private void getSelectedRow() {
            Integer brokerId = (Integer) brokerTable.getValueAt(brokerTable.getSelectedRow(), 0) ;
            BrokerModel brokerModel = new BrokerDAOImpl().getBrokerById(brokerId);
            brokerNameField.setText(brokerModel.getBrokerName());
            brokerContactField.setText(brokerModel.getBrokerContact());
            brokerTypeField.setSelectedItem(brokerModel.getBrokerType());
            disableButtons(0);
    }
}
