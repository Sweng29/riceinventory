/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package business;

import daoimpl.ShopStoreDaoImpl;
import daoimpl.ShopStoreDetailsDaoImpl;
import daoimpl.StoreDetailDAOImpl;
import java.awt.Color;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import models.ProductModel;
import models.ShopStoreDetailModel;
import models.StoreDetailsModel;
import models.StoreModel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Asif Ali
 */
public class ShopStoreFrame extends javax.swing.JFrame {

    /**
     * Creates new form ShopStoreFrame
     */
    DefaultTableModel defaultTableModel = new DefaultTableModel();

    int selectStoreRow = -1;
    int selectShopRow = -1;
    int productId = 0;

    public ShopStoreFrame() {
        initComponents();
        fillProductTabe();
        fillShopTable();
        this.setLocationRelativeTo(null);
        jstoretoshop.setSelected(true);

        jradiobutton.add(jshoptostore);
        jradiobutton.add(jstoretoshop);

        jshoptostorebtn.setEnabled(false);
        jstoretoshopbtn.setEnabled(true);

        jproducttable.setDefaultEditor(Object.class, null);
        jstoretable.setDefaultEditor(Object.class, null);
        jshoptable.setDefaultEditor(Object.class, null);
        defaultTableModel.addColumn("PId");
        defaultTableModel.addColumn("ProductName");
        defaultTableModel.addColumn("ShopName");
        defaultTableModel.addColumn("Quantity");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jradiobutton = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jproductsearch = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jshopsearch = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jshoptostore = new javax.swing.JRadioButton();
        jstoretoshop = new javax.swing.JRadioButton();
        jstoresearch = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jstoretable = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jproducttable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jshoptable = new javax.swing.JTable();
        jshoptostorebtn = new javax.swing.JLabel();
        jquantity = new javax.swing.JSpinner();
        jstoretoshopbtn = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(11, 18, 29));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel4.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(140, 192, 62));
        jLabel4.setText("Shop Store Frame");

        jLabel7.setFont(new java.awt.Font("Century Gothic", 0, 20)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("X");
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(104, 104, 104))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(490, 490, 490)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(490, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel7)
                .addContainerGap(34, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(24, 24, 24)
                    .addComponent(jLabel4)
                    .addContainerGap(25, Short.MAX_VALUE)))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jproductsearch.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        jproductsearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jproductsearchKeyReleased(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        jLabel1.setText("Search");

        jshopsearch.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        jshopsearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jshopsearchKeyReleased(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        jLabel2.setText("Search");

        jshoptostore.setBackground(new java.awt.Color(255, 255, 255));
        jshoptostore.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        jshoptostore.setText("Shop To Store");
        jshoptostore.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jshoptostoreMouseClicked(evt);
            }
        });

        jstoretoshop.setBackground(new java.awt.Color(255, 255, 255));
        jstoretoshop.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        jstoretoshop.setText("Store To Shop");
        jstoretoshop.setOpaque(false);
        jstoretoshop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jstoretoshopMouseClicked(evt);
            }
        });

        jstoresearch.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        jstoresearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jstoresearchActionPerformed(evt);
            }
        });
        jstoresearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jstoresearchKeyReleased(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        jLabel3.setText("Search");

        jstoretable.setFont(new java.awt.Font("Century Gothic", 0, 17)); // NOI18N
        jstoretable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jstoretable.setRowHeight(20);
        jstoretable.setSelectionBackground(new java.awt.Color(11, 18, 29));
        jstoretable.setSelectionForeground(new java.awt.Color(140, 198, 62));
        jScrollPane3.setViewportView(jstoretable);

        jproducttable.setFont(new java.awt.Font("Century Gothic", 0, 17)); // NOI18N
        jproducttable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jproducttable.setRowHeight(20);
        jproducttable.setSelectionBackground(new java.awt.Color(11, 18, 29));
        jproducttable.setSelectionForeground(new java.awt.Color(140, 198, 62));
        jproducttable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jproducttableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jproducttable);

        jshoptable.setFont(new java.awt.Font("Century Gothic", 0, 17)); // NOI18N
        jshoptable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jshoptable.setRowHeight(20);
        jshoptable.setSelectionBackground(new java.awt.Color(11, 18, 29));
        jshoptable.setSelectionForeground(new java.awt.Color(140, 198, 62));
        jshoptable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jshoptableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jshoptable);

        jshoptostorebtn.setBackground(new java.awt.Color(140, 192, 62));
        jshoptostorebtn.setFont(new java.awt.Font("Century Gothic", 0, 20)); // NOI18N
        jshoptostorebtn.setForeground(new java.awt.Color(255, 255, 255));
        jshoptostorebtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jshoptostorebtn.setText("<<");
        jshoptostorebtn.setOpaque(true);
        jshoptostorebtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jshoptostorebtnMouseClicked(evt);
            }
        });

        jstoretoshopbtn.setBackground(new java.awt.Color(140, 192, 62));
        jstoretoshopbtn.setFont(new java.awt.Font("Century Gothic", 0, 20)); // NOI18N
        jstoretoshopbtn.setForeground(new java.awt.Color(255, 255, 255));
        jstoretoshopbtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jstoretoshopbtn.setText(">>");
        jstoretoshopbtn.setOpaque(true);
        jstoretoshopbtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jstoretoshopbtnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jstoresearch, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(26, 26, 26)
                                    .addComponent(jstoretoshop)
                                    .addGap(18, 18, 18)
                                    .addComponent(jshoptostore))
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)))
                        .addGap(31, 31, 31)
                        .addComponent(jquantity, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(573, 573, 573)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jshoptostorebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jstoretoshopbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jproductsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jshopsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(291, 291, 291))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jLabel1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jproductsearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jshopsearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(jshoptostorebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jstoretoshopbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jquantity, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel3)
                                            .addComponent(jstoresearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jstoretoshop)
                                            .addComponent(jshoptostore))
                                        .addGap(18, 18, 18)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(66, 66, 66))))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jproducttableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jproducttableMouseClicked
        jstoretable.setRowSorter(null);
        Integer productId = Integer.parseInt(jproducttable.getValueAt(jproducttable.getSelectedRow(), 0).toString());

        fillStoreTable(productId);
    }//GEN-LAST:event_jproducttableMouseClicked

    private void jstoretoshopMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jstoretoshopMouseClicked
        jstoretoshopbtn.setEnabled(true);
        jshoptostorebtn.setEnabled(false);
        ShopStoreDaoImpl shopStoreDaoImpl = new ShopStoreDaoImpl();
        DefaultTableModel defaultTableModel = (DefaultTableModel) jstoretable.getModel();
        defaultTableModel.setColumnCount(0);
        defaultTableModel.setRowCount(0);
        defaultTableModel.addColumn("ProductName");
        defaultTableModel.addColumn("StoreName");
        defaultTableModel.addColumn("Quantity");
        jstoretable.setModel(defaultTableModel);
        jstoretable.getColumnModel().getColumn(0).setWidth(0);
        jstoretable.getColumnModel().getColumn(0).setMinWidth(0);
        jstoretable.getColumnModel().getColumn(0).setMaxWidth(0);
        jstoretable.getColumnModel().getColumn(1).setWidth(0);
        jstoretable.getColumnModel().getColumn(1).setMinWidth(0);
        jstoretable.getColumnModel().getColumn(1).setMaxWidth(0);
        jstoretable.getColumnModel().getColumn(2).setWidth(0);
        jstoretable.getColumnModel().getColumn(2).setMinWidth(0);
        jstoretable.getColumnModel().getColumn(2).setMaxWidth(0);

        DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
        headerRenderer.setBackground(new Color(11, 18, 29));
        headerRenderer.setForeground(new Color(140, 198, 62));

        for (int i = 0; i < jstoretable.getModel().getColumnCount(); i++) {
            jstoretable.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
        jstoretable.setShowHorizontalLines(true);
        jstoretable.setShowVerticalLines(true);
        this.getContentPane().setBackground(Color.WHITE);
        jScrollPane2.getViewport().setBackground(Color.WHITE);


    }//GEN-LAST:event_jstoretoshopMouseClicked

    private void jshoptostoreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jshoptostoreMouseClicked

        fillAllStoresData();
    }//GEN-LAST:event_jshoptostoreMouseClicked

    private void jshoptableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jshoptableMouseClicked

        int storeQuantity = Integer.parseInt(jshoptable.getValueAt(jshoptable.getSelectedRow(), 4).toString());
        jquantity.setValue(storeQuantity);

    }//GEN-LAST:event_jshoptableMouseClicked

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        this.dispose();
    }//GEN-LAST:event_jLabel7MouseClicked

    private void jproductsearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jproductsearchKeyReleased
        String productSearch = jproductsearch.getText();
        TableRowSorter tableRowSorter = new TableRowSorter(jproducttable.getModel());
        jproducttable.setRowSorter(tableRowSorter);
        tableRowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + productSearch));        // TODO add your handling code here:

    }//GEN-LAST:event_jproductsearchKeyReleased

    private void jstoresearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jstoresearchKeyReleased

        String storeSearch = jstoresearch.getText();
        TableRowSorter tableRowSorter = new TableRowSorter(jstoretable.getModel());
        jstoretable.setRowSorter(tableRowSorter);
        tableRowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + storeSearch));


    }//GEN-LAST:event_jstoresearchKeyReleased

    private void jshopsearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jshopsearchKeyReleased
        String shopSearch = jshopsearch.getText();
        TableRowSorter tableRowSorter = new TableRowSorter(jshoptable.getModel());
        jshoptable.setRowSorter(tableRowSorter);
        tableRowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + shopSearch));
    }//GEN-LAST:event_jshopsearchKeyReleased

    private void jshoptostorebtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jshoptostorebtnMouseClicked
        moveProductsFromShopToStore();

    }//GEN-LAST:event_jshoptostorebtnMouseClicked

    private void jstoretoshopbtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jstoretoshopbtnMouseClicked
        add();
    }//GEN-LAST:event_jstoretoshopbtnMouseClicked

    private void jstoresearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jstoresearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jstoresearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShopStoreFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShopStoreFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShopStoreFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShopStoreFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ShopStoreFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jproductsearch;
    private javax.swing.JTable jproducttable;
    private javax.swing.JSpinner jquantity;
    private javax.swing.ButtonGroup jradiobutton;
    private javax.swing.JTextField jshopsearch;
    private javax.swing.JTable jshoptable;
    private javax.swing.JRadioButton jshoptostore;
    private javax.swing.JLabel jshoptostorebtn;
    private javax.swing.JTextField jstoresearch;
    private javax.swing.JTable jstoretable;
    private javax.swing.JRadioButton jstoretoshop;
    private javax.swing.JLabel jstoretoshopbtn;
    // End of variables declaration//GEN-END:variables

    public void add() {
        if (jstoretable.getSelectedRow() > -1) {
            int row = 0;
            selectStoreRow = jstoretable.getSelectedRow();
            int storeId = Integer.parseInt(jstoretable.getValueAt(jstoretable.getSelectedRow(), 1).toString());
            int productId = Integer.parseInt(jstoretable.getValueAt(jstoretable.getSelectedRow(), 2).toString());
            int quantity = Integer.parseInt(jquantity.getValue().toString());
            int storeQuantity = Integer.parseInt(jstoretable.getValueAt(jstoretable.getSelectedRow(), 5).toString());
            int updateStoreQuantity = storeQuantity - quantity;
            if (quantity != 0) {
                if (storeQuantity != 0) {
                    if (quantity <= storeQuantity) {

                        StoreDetailsModel storeDetailsModel = new StoreDetailsModel();
                        ProductModel productModel = new ProductModel();
                        productModel.setProductId(productId);
                        storeDetailsModel.setProductModel(productModel);
                        StoreModel storeModel = new StoreModel();
                        storeModel.setStoreId(1);
                        storeDetailsModel.setStoreModel(storeModel);
                        storeDetailsModel.setAvailableQuantity(quantity);
                        Timestamp date = new Timestamp(System.currentTimeMillis());
                        storeDetailsModel.setModifiedDate(date);
                        storeDetailsModel.setCreatedDate(date);
                        ShopStoreDaoImpl shopStoreDaoImpl = new ShopStoreDaoImpl();
                        if (shopStoreDaoImpl.checkProductAvailablity(productId)) {
                            updateShopQuantity();
                            maintainShopStoreDetails(productId, storeId, 1, quantity);
                        } else {
                            row = shopStoreDaoImpl.insertProductsInToShops(storeDetailsModel);
                            maintainShopStoreDetails(productId, storeId, 1, quantity);
                        }
                        updateStoreQuantity();

                        if (row > 0) {

                            fillShopTable();
                        }
                    } else {
                        new MessageForm("Error", "No Such Quantity Available", "error.png").setVisible(true);
                    }
                } else {
                    new MessageForm("Error", "Product Out Of Stock!!", "error.png").setVisible(true);
                }
            } else {
                new MessageForm("Error", "Please Select Quantity", "error.png").setVisible(true);

            }
        } else {
            new MessageForm("Error", "Please Select Row", "error.png").setVisible(true);
        }
    }

    public void updateShopQuantity() {
        int storeId = Integer.parseInt(jstoretable.getValueAt(jstoretable.getSelectedRow(), 1).toString());
        int productId = Integer.parseInt(jstoretable.getValueAt(jstoretable.getSelectedRow(), 2).toString());
        int quantity = Integer.parseInt(jquantity.getValue().toString());
        int updateStoreQuantity = 0;
        String productName = jstoretable.getValueAt(jstoretable.getSelectedRow(), 3).toString();
        int index = -1;

        for (int i = 0; i < jshoptable.getRowCount(); i++) {
            if (productName.equals(String.valueOf(jshoptable.getValueAt(i, 2)))) {
                index = i;
                break;
            }
        }
        if (index != -1) {
            int shopQuantity = Integer.parseInt(jshoptable.getValueAt(index, 4).toString());
            updateStoreQuantity = shopQuantity + quantity;
        }
        StoreDetailsModel storeDetailsModel = new StoreDetailsModel();
        StoreModel storeModel = new StoreModel();
        storeModel.setStoreId(storeId);
        ProductModel productModel = new ProductModel();
        productModel.setProductId(productId);
        storeDetailsModel.setStoreModel(storeModel);
        storeDetailsModel.setProductModel(productModel);
        storeDetailsModel.setAvailableQuantity(updateStoreQuantity);
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        storeDetailsModel.setCreatedDate(timestamp);
        storeDetailsModel.setModifiedDate(timestamp);
        ShopStoreDaoImpl shopStoreDaoImpl = new ShopStoreDaoImpl();
        int row = shopStoreDaoImpl.updateShopQuantity(storeDetailsModel);
        if (row > 0) {
            fillShopTable();
            fillStoreTable(productId);
        }
    }

    public void updateStoreQuantity() {
        int storeId = Integer.parseInt(jstoretable.getValueAt(selectStoreRow, 1).toString());
        int productId = Integer.parseInt(jstoretable.getValueAt(selectStoreRow, 2).toString());
        int quantity = Integer.parseInt(jquantity.getValue().toString());
        int storeQuantity = Integer.parseInt(jstoretable.getValueAt(selectStoreRow, 5).toString());
        int updateStoreQuantity = storeQuantity - quantity;

        StoreDetailsModel storeDetailsModel = new StoreDetailsModel();
        StoreModel storeModel = new StoreModel();
        storeModel.setStoreId(storeId);
        ProductModel productModel = new ProductModel();
        productModel.setProductId(productId);
        storeDetailsModel.setStoreModel(storeModel);
        storeDetailsModel.setProductModel(productModel);
        storeDetailsModel.setAvailableQuantity(updateStoreQuantity);
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        storeDetailsModel.setModifiedDate(timestamp);
        storeDetailsModel.setModifiedDate(timestamp);
        ShopStoreDaoImpl shopStoreDaoImpl = new ShopStoreDaoImpl();
        int row = shopStoreDaoImpl.updateExistingProductQuantity(storeDetailsModel);
        if (row > 0) {
            fillStoreTable(productId);
        }
    }

    private void moveProductsFromShopToStore() {
        if (jshoptable.getSelectedRow() > -1) {
            if (jstoretable.getSelectedRow() > -1) {
                selectShopRow = jshoptable.getSelectedRow();
                int quantity = Integer.parseInt(jquantity.getValue().toString());
                int shopQuantity = Integer.parseInt(jshoptable.getValueAt(jshoptable.getSelectedRow(), 4).toString());
                int storeQuantity = Integer.parseInt(jstoretable.getValueAt(jstoretable.getSelectedRow(), 5).toString());
                Integer shopProductId = (Integer) jshoptable.getValueAt(jshoptable.getSelectedRow(), 1);
                productId = Integer.parseInt(jstoretable.getValueAt(jstoretable.getSelectedRow(), 2).toString());
                String shopProduct = jshoptable.getValueAt(jshoptable.getSelectedRow(), 2).toString();
                String storeProduct = jstoretable.getValueAt(jstoretable.getSelectedRow(), 3).toString();
                int storeId = Integer.parseInt(jstoretable.getValueAt(jstoretable.getSelectedRow(), 1).toString());

                if (quantity != 0) {
                    if (quantity <= shopQuantity) {

                        if (shopProduct.equals(storeProduct)) {

                            updateStoreProductQuantity(storeId, productId, quantity + storeQuantity);
                            updateShopProductQuantity();
                            maintainShopStoreDetails(productId, 1, storeId, quantity);
                            deleteShopProduct();
                        } else if (new ShopStoreDaoImpl().checkProductInStoreAvailablity(shopProductId, storeId)) {
                            Integer sQuantity = 0;
                            for (int i = 0; i < jstoretable.getRowCount(); i++) {

                                Integer pId = (Integer) jstoretable.getValueAt(i, 2);
                                Integer sId = (Integer) jstoretable.getValueAt(i, 1);
                                if (pId == shopProductId && sId == storeId) {

                                    sQuantity = (Integer) jstoretable.getValueAt(i, 5);
                                    break;
                                }
                            }

                            updateStoreProductQuantity(storeId, shopProductId, quantity + sQuantity);
                            updateShopProductQuantity();
                            maintainShopStoreDetails(shopProductId, 1, storeId, quantity);
                            deleteShopProduct();
                        } else {

                            addNewShopToStoreProduct(storeId, shopProductId, quantity);
                            updateShopProductQuantity();
                            maintainShopStoreDetails(shopProductId, 1, storeId, quantity);
                            deleteShopProduct();
                        }

                    } else {

                        new MessageForm("Error", "Sorry No More Quantity Available", "error.png").setVisible(true);

                    }

                } else {

                    new MessageForm("Error", "Please Select Quantity", "error.png").setVisible(true);

                }

            } else {

                new MessageForm("Error", "Please Select Store From Store Table", "error.png").setVisible(true);

            }
        } else {
            new MessageForm("Error", "Please Select Row From Shop Table", "error.png").setVisible(true);
        }

    }

    private void updateStoreProductQuantity(int storeId, int productId, int i) {

        StoreDetailsModel storeDetailsModel = new StoreDetailsModel();
        StoreModel storeModel = new StoreModel();
        storeModel.setStoreId(storeId);
        ProductModel productModel = new ProductModel();
        productModel.setProductId(productId);
        storeDetailsModel.setStoreModel(storeModel);
        storeDetailsModel.setProductModel(productModel);
        storeDetailsModel.setAvailableQuantity(i);
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        storeDetailsModel.setModifiedDate(timestamp);
        storeDetailsModel.setModifiedDate(timestamp);
        ShopStoreDaoImpl shopStoreDaoImpl = new ShopStoreDaoImpl();
        int row = shopStoreDaoImpl.updateExistingProductQuantity(storeDetailsModel);
        if (row > 0) {
            fillAllStoresData();
        }

    }

    private void updateShopProductQuantity() {

        int quantity = Integer.parseInt(jquantity.getValue().toString());
        int shopQuantity = Integer.parseInt(jshoptable.getValueAt(selectShopRow, 4).toString());
        int productId = (Integer) jshoptable.getValueAt(selectShopRow, 1);
        StoreDetailsModel storeDetailsModel = new StoreDetailsModel();
        ProductModel productModel = new ProductModel();
        productModel.setProductId(productId);
        storeDetailsModel.setProductModel(productModel);
        storeDetailsModel.setAvailableQuantity(shopQuantity - quantity);
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        storeDetailsModel.setModifiedDate(timestamp);
        storeDetailsModel.setModifiedDate(timestamp);
        ShopStoreDaoImpl shopStoreDaoImpl = new ShopStoreDaoImpl();
        int row = shopStoreDaoImpl.updateShopQuantity(storeDetailsModel);
        if (row > 0) {
            fillShopTable();
            //fillStoreTable(productId);
        }

    }

    private void fillAllStoresData() {
        jstoretoshopbtn.setEnabled(false);
        jshoptostorebtn.setEnabled(true);
        ShopStoreDaoImpl shopStoreDaoImpl = new ShopStoreDaoImpl();
        ResultSet resultSet = shopStoreDaoImpl.getAllStoreData();
        jstoretable.setModel(DbUtils.resultSetToTableModel(resultSet));

        jstoretable.getColumnModel().getColumn(0).setWidth(0);
        jstoretable.getColumnModel().getColumn(0).setMinWidth(0);
        jstoretable.getColumnModel().getColumn(0).setMaxWidth(0);
        jstoretable.getColumnModel().getColumn(1).setWidth(0);
        jstoretable.getColumnModel().getColumn(1).setMinWidth(0);
        jstoretable.getColumnModel().getColumn(1).setMaxWidth(0);
        jstoretable.getColumnModel().getColumn(2).setWidth(0);
        jstoretable.getColumnModel().getColumn(2).setMinWidth(0);
        jstoretable.getColumnModel().getColumn(2).setMaxWidth(0);

        DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
        headerRenderer.setBackground(new Color(11, 18, 29));
        headerRenderer.setForeground(new Color(140, 198, 62));

        for (int i = 0; i < jstoretable.getModel().getColumnCount(); i++) {
            jstoretable.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
        jstoretable.setShowHorizontalLines(true);
        jstoretable.setShowVerticalLines(true);
        this.getContentPane().setBackground(Color.WHITE);
        jScrollPane2.getViewport().setBackground(Color.WHITE);

    }

    private void fillProductTabe() {
        ShopStoreDaoImpl shopStoreDaoImpl = new ShopStoreDaoImpl();
        ResultSet resultSet = shopStoreDaoImpl.getAllProducts();
        jproducttable.setModel(DbUtils.resultSetToTableModel(resultSet));

        jproducttable.getColumnModel().getColumn(0).setWidth(0);
        jproducttable.getColumnModel().getColumn(0).setMinWidth(0);
        jproducttable.getColumnModel().getColumn(0).setMaxWidth(0);

        DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
        headerRenderer.setBackground(new Color(11, 18, 29));
        headerRenderer.setForeground(new Color(140, 198, 62));

        for (int i = 0; i < jproducttable.getModel().getColumnCount(); i++) {
            jproducttable.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
        jproducttable.setShowHorizontalLines(true);
        jproducttable.setShowVerticalLines(true);
        this.getContentPane().setBackground(Color.WHITE);
        jScrollPane2.getViewport().setBackground(Color.WHITE);

    }

    private void fillStoreTable(Integer productId) {
        ShopStoreDaoImpl shopStoreDaoImpl = new ShopStoreDaoImpl();
        ResultSet resultSet = shopStoreDaoImpl.getAllStores(productId);
        jstoretable.setModel(DbUtils.resultSetToTableModel(resultSet));

        jstoretable.getColumnModel().getColumn(0).setWidth(0);
        jstoretable.getColumnModel().getColumn(0).setMinWidth(0);
        jstoretable.getColumnModel().getColumn(0).setMaxWidth(0);
        jstoretable.getColumnModel().getColumn(1).setWidth(0);
        jstoretable.getColumnModel().getColumn(1).setMinWidth(0);
        jstoretable.getColumnModel().getColumn(1).setMaxWidth(0);
        jstoretable.getColumnModel().getColumn(2).setWidth(0);
        jstoretable.getColumnModel().getColumn(2).setMinWidth(0);
        jstoretable.getColumnModel().getColumn(2).setMaxWidth(0);

        DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
        headerRenderer.setBackground(new Color(11, 18, 29));
        headerRenderer.setForeground(new Color(140, 198, 62));

        for (int i = 0; i < jstoretable.getModel().getColumnCount(); i++) {
            jstoretable.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
        jstoretable.setShowHorizontalLines(true);
        jstoretable.setShowVerticalLines(true);
        this.getContentPane().setBackground(Color.WHITE);
        jScrollPane2.getViewport().setBackground(Color.WHITE);

    }

    private void fillShopTable() {
        ShopStoreDaoImpl shopStoreDaoImpl = new ShopStoreDaoImpl();
        ResultSet resultSet = shopStoreDaoImpl.getAllShopeDetails();
        jshoptable.setModel(DbUtils.resultSetToTableModel(resultSet));
        jshoptable.getColumnModel().getColumn(0).setWidth(0);
        jshoptable.getColumnModel().getColumn(0).setMinWidth(0);
        jshoptable.getColumnModel().getColumn(0).setMaxWidth(0);
        jshoptable.getColumnModel().getColumn(1).setWidth(0);
        jshoptable.getColumnModel().getColumn(1).setMinWidth(0);
        jshoptable.getColumnModel().getColumn(1).setMaxWidth(0);

        DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
        headerRenderer.setBackground(new Color(11, 18, 29));
        headerRenderer.setForeground(new Color(140, 198, 62));

        for (int i = 0; i < jshoptable.getModel().getColumnCount(); i++) {
            jshoptable.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
        jshoptable.setShowHorizontalLines(true);
        jshoptable.setShowVerticalLines(true);
        this.getContentPane().setBackground(Color.WHITE);
        jScrollPane2.getViewport().setBackground(Color.WHITE);

    }

    private void deleteShopProduct() {

        ShopStoreDaoImpl shopStoreDaoImpl = new ShopStoreDaoImpl();
        for (int i = 0; i < jshoptable.getRowCount(); i++) {
            Integer quantity = (Integer) jshoptable.getValueAt(i, 4);
            Integer productId = (Integer) jshoptable.getValueAt(i, 1);
            if (quantity == 0) {

                int row = shopStoreDaoImpl.deleteShopDetail(productId);

                if (row > 0) {
                    fillShopTable();
                }
            }

        }

    }

    private void addNewShopToStoreProduct(int storeId, Integer shopProductId, int quantity) {
        StoreDetailsModel storeDetailsModel = new StoreDetailsModel();
        StoreDetailDAOImpl storeDetailsDAOImpl = new StoreDetailDAOImpl();
        ProductModel productModel = new ProductModel();
        productModel.setProductId(shopProductId);
        StoreModel storeModel = new StoreModel();
        storeModel.setStoreId(storeId);
        storeDetailsModel.setAvailableQuantity(quantity);
        Timestamp currentTime = new Timestamp(System.currentTimeMillis());
        storeDetailsModel.setProductModel(productModel);
        storeDetailsModel.setStoreModel(storeModel);
        storeDetailsModel.setCreatedDate(currentTime);
        storeDetailsModel.setModifiedDate(currentTime);
        boolean check = storeDetailsDAOImpl.addStoreDetail(storeDetailsModel);
        fillAllStoresData();
        if (check) {

        }
    }

    public void maintainShopStoreDetails(int productId, int fromStore, int toStore, int quantity) {

        ShopStoreDetailModel shopStoreDetailModel = new ShopStoreDetailModel();
        ShopStoreDetailsDaoImpl shopStoreDetailsDaoImpl = new ShopStoreDetailsDaoImpl();
        ProductModel productModel = new ProductModel();
        productModel.setProductId(productId);
        StoreModel fromStoreModel = new StoreModel();
        fromStoreModel.setStoreId(fromStore);
        StoreModel toStoreModel = new StoreModel();
        toStoreModel.setStoreId(toStore);
        shopStoreDetailModel.setQuantity(quantity);
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        shopStoreDetailModel.setDate(timestamp);
        shopStoreDetailModel.setProductModel(productModel);
        shopStoreDetailModel.setFromStore(fromStoreModel);
        shopStoreDetailModel.setToStore(toStoreModel);
        shopStoreDetailModel.setCreatedDate(timestamp);
        shopStoreDetailModel.setModifiedDate(timestamp);
        shopStoreDetailModel.setComments("no");
        shopStoreDetailsDaoImpl.addShopStoreDetails(shopStoreDetailModel);
    }

}
