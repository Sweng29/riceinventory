/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package business;

import daoimpl.ShopStoreDaoImpl;
import daoimpl.ShopStoreDetailsDaoImpl;
import daoimpl.StoreDetailDAOImpl;
import daoimpl.StoreStoreDaoImpl;
import java.awt.Color;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import models.ProductModel;
import models.ShopStoreDetailModel;
import models.StoreDetailsModel;
import models.StoreModel;

import net.proteanit.sql.DbUtils;

/**
 *
 * @author Asif Ali
 */
public class StoreStoreFrame extends javax.swing.JFrame {

    /**
     * Creates new form ShopStoreFrame
     */
    public StoreStoreFrame() {
        initComponents();
        fillStoreTable();
        fillAllStoreTable();
        this.setLocationRelativeTo(null);
        jproducttable.setDefaultEditor(Object.class, null);
        jstoretable.setDefaultEditor(Object.class, null);
        jsecondstore.setDefaultEditor(Object.class, null);
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jradiobutton = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jstoresearch = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jsecondstoresearch = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jproductsearch = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jproducttable = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jstoretable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jsecondstore = new javax.swing.JTable();
        jstoretoshopbtn = new javax.swing.JLabel();
        jquantity = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(11, 18, 29));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel4.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(140, 192, 62));
        jLabel4.setText("Store Store Frame");

        jLabel7.setFont(new java.awt.Font("Century Gothic", 0, 20)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("X");
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(104, 104, 104))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(490, 490, 490)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(490, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel7)
                .addContainerGap(34, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(24, 24, 24)
                    .addComponent(jLabel4)
                    .addContainerGap(25, Short.MAX_VALUE)))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jstoresearch.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        jstoresearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jstoresearchActionPerformed(evt);
            }
        });
        jstoresearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jstoresearchKeyReleased(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        jLabel1.setText("Search");

        jsecondstoresearch.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        jsecondstoresearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jsecondstoresearchActionPerformed(evt);
            }
        });
        jsecondstoresearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jsecondstoresearchKeyReleased(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        jLabel2.setText("Search");

        jproductsearch.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        jproductsearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jproductsearchKeyReleased(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        jLabel3.setText("Search");

        jproducttable.setFont(new java.awt.Font("Century Gothic", 0, 17)); // NOI18N
        jproducttable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jproducttable.setRowHeight(20);
        jproducttable.setSelectionBackground(new java.awt.Color(11, 18, 29));
        jproducttable.setSelectionForeground(new java.awt.Color(140, 198, 62));
        jScrollPane3.setViewportView(jproducttable);

        jstoretable.setFont(new java.awt.Font("Century Gothic", 0, 17)); // NOI18N
        jstoretable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jstoretable.setRowHeight(20);
        jstoretable.setSelectionBackground(new java.awt.Color(11, 18, 29));
        jstoretable.setSelectionForeground(new java.awt.Color(140, 198, 62));
        jstoretable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jstoretableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jstoretable);

        jsecondstore.setFont(new java.awt.Font("Century Gothic", 0, 17)); // NOI18N
        jsecondstore.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jsecondstore.setRowHeight(20);
        jsecondstore.setSelectionBackground(new java.awt.Color(11, 18, 29));
        jsecondstore.setSelectionForeground(new java.awt.Color(140, 198, 62));
        jsecondstore.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jsecondstoreMouseClicked(evt);
            }
        });
        jsecondstore.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jsecondstoreKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jsecondstore);

        jstoretoshopbtn.setBackground(new java.awt.Color(140, 192, 62));
        jstoretoshopbtn.setFont(new java.awt.Font("Century Gothic", 0, 20)); // NOI18N
        jstoretoshopbtn.setForeground(new java.awt.Color(255, 255, 255));
        jstoretoshopbtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jstoretoshopbtn.setText(">>");
        jstoretoshopbtn.setOpaque(true);
        jstoretoshopbtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jstoretoshopbtnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jstoresearch, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jproductsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(51, 51, 51)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jstoretoshopbtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jquantity, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jsecondstoresearch, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(291, 291, 291))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jstoresearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jsecondstoresearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jquantity, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(72, 72, 72)
                        .addComponent(jstoretoshopbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(jproductsearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(7, 7, 7)))
                        .addGap(66, 66, 66))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jstoretableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jstoretableMouseClicked
        jproducttable.setRowSorter(null);
        Integer storeId = (Integer) jstoretable.getValueAt(jstoretable.getSelectedRow(), 0);
        fillProductTable(storeId);
        
    }//GEN-LAST:event_jstoretableMouseClicked

    private void jsecondstoreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jsecondstoreMouseClicked


    }//GEN-LAST:event_jsecondstoreMouseClicked

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        this.dispose();
    }//GEN-LAST:event_jLabel7MouseClicked

    private void jstoresearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jstoresearchKeyReleased
        String storeSearch = jstoresearch.getText();
        TableRowSorter tableRowSorter = new TableRowSorter(jstoretable.getModel());
        jstoretable.setRowSorter(tableRowSorter);
        tableRowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + storeSearch));    
    }//GEN-LAST:event_jstoresearchKeyReleased

    private void jproductsearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jproductsearchKeyReleased
        String productSearch = jproductsearch.getText();
        TableRowSorter tableRowSorter = new TableRowSorter(jproducttable.getModel());
        jproducttable.setRowSorter(tableRowSorter);
        tableRowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + productSearch));
        

    }//GEN-LAST:event_jproductsearchKeyReleased

    private void jsecondstoresearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jsecondstoresearchKeyReleased
        String storeSearch = jsecondstoresearch.getText();
        TableRowSorter tableRowSorter = new TableRowSorter(jsecondstore.getModel());
        jsecondstore.setRowSorter(tableRowSorter);
        tableRowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + storeSearch));


    }//GEN-LAST:event_jsecondstoresearchKeyReleased

    private void jstoretoshopbtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jstoretoshopbtnMouseClicked
        add();
    }//GEN-LAST:event_jstoretoshopbtnMouseClicked

    private void jstoresearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jstoresearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jstoresearchActionPerformed

    private void jsecondstoreKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jsecondstoreKeyReleased
        String storeSearch = jsecondstoresearch.getText();
        TableRowSorter tableRowSorter = new TableRowSorter(jsecondstore.getModel());
        jsecondstore.setRowSorter(tableRowSorter);
        tableRowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + storeSearch));
    }//GEN-LAST:event_jsecondstoreKeyReleased

    private void jsecondstoresearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jsecondstoresearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jsecondstoresearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StoreStoreFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StoreStoreFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StoreStoreFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StoreStoreFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StoreStoreFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jproductsearch;
    private javax.swing.JTable jproducttable;
    private javax.swing.JSpinner jquantity;
    private javax.swing.ButtonGroup jradiobutton;
    private javax.swing.JTable jsecondstore;
    private javax.swing.JTextField jsecondstoresearch;
    private javax.swing.JTextField jstoresearch;
    private javax.swing.JTable jstoretable;
    private javax.swing.JLabel jstoretoshopbtn;
    // End of variables declaration//GEN-END:variables

    private void fillStoreTable() {
        StoreStoreDaoImpl storeStoreDaoImpl = new StoreStoreDaoImpl();
        jstoretable.setModel(DbUtils.resultSetToTableModel(storeStoreDaoImpl.getStores()));
        

        jstoretable.getColumnModel().getColumn(0).setWidth(0);
        jstoretable.getColumnModel().getColumn(0).setMinWidth(0);
        jstoretable.getColumnModel().getColumn(0).setMaxWidth(0);
        
        DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
        headerRenderer.setBackground(new Color(11, 18, 29));
        headerRenderer.setForeground(new Color(140, 198, 62));

        for (int i = 0; i < jstoretable.getModel().getColumnCount(); i++) {
            jstoretable.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
        jstoretable.setShowHorizontalLines(true);
        jstoretable.setShowVerticalLines(true);
        this.getContentPane().setBackground(Color.WHITE);
        jScrollPane2.getViewport().setBackground(Color.WHITE);

    }

    private void fillProductTable(Integer storeId) {
        StoreStoreDaoImpl storeStoreDaoImpl = new StoreStoreDaoImpl();
        jproducttable.setModel(DbUtils.resultSetToTableModel(storeStoreDaoImpl.getProductsOfStore(storeId)));
        jproducttable.getColumnModel().getColumn(0).setWidth(0);
        jproducttable.getColumnModel().getColumn(0).setMinWidth(0);
        jproducttable.getColumnModel().getColumn(0).setMaxWidth(0);
        jproducttable.getColumnModel().getColumn(1).setWidth(0);
        jproducttable.getColumnModel().getColumn(1).setMinWidth(0);
        jproducttable.getColumnModel().getColumn(1).setMaxWidth(0);
        jproducttable.getColumnModel().getColumn(2).setWidth(0);
        jproducttable.getColumnModel().getColumn(2).setMinWidth(0);
        jproducttable.getColumnModel().getColumn(2).setMaxWidth(0);
        
        DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
        headerRenderer.setBackground(new Color(11, 18, 29));
        headerRenderer.setForeground(new Color(140, 198, 62));

        for (int i = 0; i < jproducttable.getModel().getColumnCount(); i++) {
            jproducttable.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
        jproducttable.setShowHorizontalLines(true);
        jproducttable.setShowVerticalLines(true);
        this.getContentPane().setBackground(Color.WHITE);
        jScrollPane2.getViewport().setBackground(Color.WHITE);

    }

    private void fillAllStoreTable() {
        StoreStoreDaoImpl storeStoreDaoImpl = new StoreStoreDaoImpl();
        jsecondstore.setModel(DbUtils.resultSetToTableModel(storeStoreDaoImpl.getStores()));
        

        jsecondstore.getColumnModel().getColumn(0).setWidth(0);
        jsecondstore.getColumnModel().getColumn(0).setMinWidth(0);
        jsecondstore.getColumnModel().getColumn(0).setMaxWidth(0);
        
        DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
        headerRenderer.setBackground(new Color(11, 18, 29));
        headerRenderer.setForeground(new Color(140, 198, 62));

        for (int i = 0; i < jsecondstore.getModel().getColumnCount(); i++) {
            jsecondstore.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
        jsecondstore.setShowHorizontalLines(true);
        jsecondstore.setShowVerticalLines(true);
        this.getContentPane().setBackground(Color.WHITE);
        jScrollPane2.getViewport().setBackground(Color.WHITE);

    }

    private void add() {
        if (jproducttable.getSelectedRow() > -1) {

            if (jsecondstore.getSelectedRow() > -1) {
                Integer quantity = (Integer) jquantity.getValue();
                Integer storeProductQuantity = (Integer) jproducttable.getValueAt(jproducttable.getSelectedRow(), 5);
                Integer storeId = (Integer) jproducttable.getValueAt(jproducttable.getSelectedRow(), 1);
                Integer productId = (Integer) jproducttable.getValueAt(jproducttable.getSelectedRow(), 2);
                String storeProduct = jproducttable.getValueAt(jproducttable.getSelectedRow(), 3).toString();
                Integer secondStoreId = (Integer) jsecondstore.getValueAt(jsecondstore.getSelectedRow(), 0);
                if (quantity != 0) {
                    if (storeProductQuantity != 0) {
                     if(quantity<=storeProductQuantity){
                        
                        if(storeId == secondStoreId){
                        
                            new MessageForm("Error", "This Product Is Already Available In This Store", "error.png").setVisible(true);
                   
                            
                        }else if(new ShopStoreDaoImpl().checkProductInStoreAvailablity(productId, secondStoreId)){
                        
                            
                            int q = new StoreStoreDaoImpl().getStoreQuantity(secondStoreId, productId);
                            updateSecondStoreProduct(productId, secondStoreId, quantity+q);
                            updateStoreProduct(productId, storeId, storeProductQuantity-quantity);
                            maintainStoreStoreDetails(productId, storeId, secondStoreId, quantity);
                            
                        }else{
                        
                            addNewShopToStoreProduct(secondStoreId, productId, quantity);
                            updateStoreProduct(productId, storeId, storeProductQuantity-quantity);
                            maintainStoreStoreDetails(productId, storeId, secondStoreId, quantity);
                            
                        }
                        
                        
                     }else{
                     
                            new MessageForm("Error", "No More Quantity Available", "error.png").setVisible(true);
                     }
                    } else {
                        new MessageForm("Error", "No More Quantity Available", "error.png").setVisible(true);
                    }
                } else {
                    new MessageForm("Error", "Please Select Quantity", "error.png").setVisible(true);
                }

            }

        }

    }

    private void updateSecondStoreProduct(Integer productId, Integer secondStoreId, int i) {
    
        StoreDetailsModel storeDetailsModel = new StoreDetailsModel();
        StoreModel storeModel = new StoreModel();
        storeModel.setStoreId(secondStoreId);
        ProductModel productModel = new ProductModel();
        productModel.setProductId(productId);
        storeDetailsModel.setStoreModel(storeModel);
        storeDetailsModel.setProductModel(productModel);
        storeDetailsModel.setAvailableQuantity(i);
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        storeDetailsModel.setModifiedDate(timestamp);
        storeDetailsModel.setModifiedDate(timestamp);
        ShopStoreDaoImpl shopStoreDaoImpl = new ShopStoreDaoImpl();
        int row = shopStoreDaoImpl.updateExistingProductQuantity(storeDetailsModel);
        //if (row > 0) {
        
            fillAllStoreTable();
          //  fillAllStoresData();
        //}

        
    }

    private void updateStoreProduct(Integer productId, Integer storeId, int i) {
        StoreDetailsModel storeDetailsModel = new StoreDetailsModel();
        StoreModel storeModel = new StoreModel();
        storeModel.setStoreId(storeId);
        ProductModel productModel = new ProductModel();
        productModel.setProductId(productId);
        storeDetailsModel.setStoreModel(storeModel);
        storeDetailsModel.setProductModel(productModel);
        storeDetailsModel.setAvailableQuantity(i);
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        storeDetailsModel.setModifiedDate(timestamp);
        storeDetailsModel.setModifiedDate(timestamp);
        ShopStoreDaoImpl shopStoreDaoImpl = new ShopStoreDaoImpl();
        int row = shopStoreDaoImpl.updateExistingProductQuantity(storeDetailsModel);
        if (row > 0) {
            fillProductTable(storeId);
            //fillAllStoreTable();
        }

    
    }
    public void maintainStoreStoreDetails(int productId , int fromStore , int toStore , int quantity){
    
        ShopStoreDetailModel shopStoreDetailModel = new ShopStoreDetailModel();
        ShopStoreDetailsDaoImpl shopStoreDetailsDaoImpl = new ShopStoreDetailsDaoImpl();
        ProductModel productModel = new ProductModel();
        productModel.setProductId(productId);
        StoreModel fromStoreModel = new StoreModel();
        fromStoreModel.setStoreId(fromStore);
        StoreModel toStoreModel = new StoreModel();      
        toStoreModel.setStoreId(toStore);
        shopStoreDetailModel.setQuantity(quantity);
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        shopStoreDetailModel.setDate(timestamp);
        shopStoreDetailModel.setProductModel(productModel);
        shopStoreDetailModel.setFromStore(fromStoreModel);
        shopStoreDetailModel.setToStore(toStoreModel);
        shopStoreDetailModel.setCreatedDate(timestamp);
        shopStoreDetailModel.setModifiedDate(timestamp);
        shopStoreDetailModel.setComments("no");
        shopStoreDetailsDaoImpl.addShopStoreDetails(shopStoreDetailModel);
    }
    private void addNewShopToStoreProduct(int storeId, Integer shopProductId, int quantity) {
       StoreDetailsModel storeDetailsModel = new StoreDetailsModel();
       StoreDetailDAOImpl storeDetailsDAOImpl = new StoreDetailDAOImpl();
       ProductModel productModel = new ProductModel();
       productModel.setProductId(shopProductId);
       StoreModel storeModel = new StoreModel();
       storeModel.setStoreId(storeId);
       storeDetailsModel.setAvailableQuantity(quantity);
        Timestamp currentTime = new Timestamp(System.currentTimeMillis());
            storeDetailsModel.setProductModel(productModel);
            storeDetailsModel.setStoreModel(storeModel);
            storeDetailsModel.setCreatedDate(currentTime);
            storeDetailsModel.setModifiedDate(currentTime);
           boolean check = storeDetailsDAOImpl.addStoreDetail(storeDetailsModel);
      fillAllStoreTable();
           if(check){
       
       }
    }

}
