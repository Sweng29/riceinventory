/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package business;

import daoimpl.ProductDaoImpl;
import daoimpl.SellDAOImpl;
import daoimpl.SellDetailDAOImpl;
import daoimpl.StoreDaoImpl;
import daoimpl.StoreDetailDAOImpl;
import java.awt.Color;
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.Timestamp;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableRowSorter;
import models.ProductModel;
import models.SellDetailModel;
import models.SellModel;
import models.StoreDetailsModel;
import models.StoreModel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Lenovo
 */
public class SellDetailNewFrame extends javax.swing.JFrame {

    /**
     * Creates new form SellDetailNewFrame
     */
    Integer sellId = null;
    Integer productId = null;
    SellFrame sellFrame = null;
    Integer sellDetailId = null;
    public SellDetailNewFrame() {
        initComponents();
        fillProductTable();
    }
    public SellDetailNewFrame(Integer sellId,SellFrame sellFrame) {
        initComponents();
        this.sellId = sellId;
        sellIdLabel.setText("Sell ID : "+sellId);
        this.sellFrame = sellFrame;
        fillProductTable();
        fillSellDetailTable(sellId);
        this.setLocationRelativeTo(null);
        fillStoreTable();
        sellDetailTable.setDefaultEditor(Object.class, null);
        productTable.setDefaultEditor(Object.class, null);
        storeTable.setDefaultEditor(Object.class, null);
        SellModel sellModel = new SellDAOImpl().getSellRecordById(sellId);
        companyNameLabel.setText("Company Name: "+sellModel.getCompanyModel().getCompanyName());
        brokerNameLabel.setText("Broker Name: "+sellModel.getBrokerModel().getBrokerName());     
        DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
        headerRenderer.setBackground(new Color(11, 18, 29));
        headerRenderer.setForeground(new Color(140, 198, 62));

        for (int i = 0; i < storeTable.getModel().getColumnCount(); i++) {
            storeTable.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
        storeTable.setShowHorizontalLines(true);
        storeTable.setShowVerticalLines(true);
        this.getContentPane().setBackground(Color.WHITE);
        jScrollPane2.getViewport().setBackground(Color.WHITE);
        this.setExtendedState(SellDetailNewFrame.MAXIMIZED_BOTH);
        disableButtons(1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        storeTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        sellDetailTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        quaintityField = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        priceField = new javax.swing.JTextField();
        addProductButton = new javax.swing.JLabel();
        removeProductButton = new javax.swing.JLabel();
        removeProductButton1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        sellIdLabel = new javax.swing.JLabel();
        totalAmountLabel = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        searchSaleDetailField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        searchProduct = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        searchStore = new javax.swing.JTextField();
        brokerNameLabel = new javax.swing.JLabel();
        companyNameLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        productTable.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        productTable.setRowHeight(20);
        productTable.setSelectionBackground(new java.awt.Color(0, 0, 0));
        productTable.setSelectionForeground(new java.awt.Color(140, 198, 62));
        productTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                productTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(productTable);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 510, 220));

        storeTable.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        storeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        storeTable.setRowHeight(20);
        storeTable.setSelectionBackground(new java.awt.Color(0, 0, 0));
        storeTable.setSelectionForeground(new java.awt.Color(140, 198, 62));
        jScrollPane2.setViewportView(storeTable);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 460, 510, 220));

        sellDetailTable.setAutoCreateRowSorter(true);
        sellDetailTable.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        sellDetailTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        sellDetailTable.setRowHeight(20);
        sellDetailTable.setSelectionBackground(new java.awt.Color(0, 0, 0));
        sellDetailTable.setSelectionForeground(new java.awt.Color(140, 198, 62));
        sellDetailTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sellDetailTableMouseClicked(evt);
            }
        });
        sellDetailTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                sellDetailTableKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(sellDetailTable);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 170, 580, 510));

        jLabel5.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel5.setText("Quaintity");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 170, 70, 20));

        quaintityField.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jPanel1.add(quaintityField, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 190, 130, 30));

        jLabel7.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel7.setText("Price");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 240, 50, 20));

        priceField.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jPanel1.add(priceField, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 260, 130, 30));

        addProductButton.setBackground(new java.awt.Color(140, 198, 62));
        addProductButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        addProductButton.setForeground(new java.awt.Color(255, 255, 255));
        addProductButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addProductButton.setText(">>");
        addProductButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addProductButton.setOpaque(true);
        addProductButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addProductButtonMouseClicked(evt);
            }
        });
        jPanel1.add(addProductButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 310, 130, 50));

        removeProductButton.setBackground(new java.awt.Color(140, 198, 62));
        removeProductButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        removeProductButton.setForeground(new java.awt.Color(255, 255, 255));
        removeProductButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        removeProductButton.setText("<<");
        removeProductButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        removeProductButton.setOpaque(true);
        removeProductButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeProductButtonMouseClicked(evt);
            }
        });
        jPanel1.add(removeProductButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 380, 130, 50));

        removeProductButton1.setBackground(new java.awt.Color(140, 198, 62));
        removeProductButton1.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        removeProductButton1.setForeground(new java.awt.Color(255, 255, 255));
        removeProductButton1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        removeProductButton1.setText("Reset");
        removeProductButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        removeProductButton1.setOpaque(true);
        removeProductButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeProductButton1MouseClicked(evt);
            }
        });
        jPanel1.add(removeProductButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 450, 130, 50));

        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel3.setText("Sell Detail Record");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 140, 160, 20));

        jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel4.setText("Product Record");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 150, 20));

        jLabel6.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel6.setText("Store Record");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 420, 130, 30));

        sellIdLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        sellIdLabel.setText("Sell ID : ");
        jPanel1.add(sellIdLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 40, 160, -1));

        totalAmountLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jPanel1.add(totalAmountLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 30, 140, 40));

        jLabel9.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel9.setText("Total : ");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 30, 60, 40));

        jLabel8.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Search Product");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 100, -1, 26));

        searchSaleDetailField.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        searchSaleDetailField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchSaleDetailFieldActionPerformed(evt);
            }
        });
        searchSaleDetailField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchSaleDetailFieldKeyReleased(evt);
            }
        });
        jPanel1.add(searchSaleDetailField, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 130, 220, -1));

        jLabel10.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Search Product");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 100, -1, 26));

        searchProduct.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        searchProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchProductActionPerformed(evt);
            }
        });
        searchProduct.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchProductKeyReleased(evt);
            }
        });
        jPanel1.add(searchProduct, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 130, 220, -1));

        jLabel11.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Search Store");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 420, -1, 26));

        searchStore.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        searchStore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchStoreActionPerformed(evt);
            }
        });
        searchStore.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchStoreKeyReleased(evt);
            }
        });
        jPanel1.add(searchStore, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 420, 220, -1));

        brokerNameLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        brokerNameLabel.setText("Broker Name : ");
        jPanel1.add(brokerNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 40, 330, 30));

        companyNameLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        companyNameLabel.setText("CompanyName : ");
        jPanel1.add(companyNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 40, 370, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 61, 1360, 710));

        jPanel2.setBackground(new java.awt.Color(11, 18, 29));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 27)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(140, 192, 62));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Sell Detail Panel");

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("X");
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(568, 568, 568)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 543, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1370, 60));

        jMenuBar1.setBackground(new java.awt.Color(0, 0, 0));

        jMenu1.setText("File");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Add");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Update");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Delete");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("Reset");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setText("Back");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem7.setText("Exit");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem7);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void productTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productTableMouseClicked
        storeTable.setRowSorter(null);
        productId = (Integer) productTable.getValueAt(productTable.getSelectedRow(), 0);
        getAllStoresWithProductId(productId);
        disableButtons(1);
    }//GEN-LAST:event_productTableMouseClicked

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        this.dispose();
        sellFrame.fillSellTable();
        sellFrame.clearAllFields();
    }//GEN-LAST:event_jLabel2MouseClicked

    private void addProductButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addProductButtonMouseClicked
        addSellDetail();
    }//GEN-LAST:event_addProductButtonMouseClicked

    private void removeProductButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeProductButtonMouseClicked
        deleteSellDetail();
    }//GEN-LAST:event_removeProductButtonMouseClicked

    private void removeProductButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeProductButton1MouseClicked
        clearAllFields();
        //disableButtons(1);
    }//GEN-LAST:event_removeProductButton1MouseClicked

    private void sellDetailTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sellDetailTableMouseClicked
        getSelectedRow();
    }//GEN-LAST:event_sellDetailTableMouseClicked

    private void searchSaleDetailFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchSaleDetailFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchSaleDetailFieldActionPerformed

    private void searchSaleDetailFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchSaleDetailFieldKeyReleased
        String txt = searchSaleDetailField.getText().toString();
        TableRowSorter trs = new TableRowSorter(sellDetailTable.getModel());
        sellDetailTable.setRowSorter(trs);
        trs.setRowFilter(RowFilter.regexFilter("(?i)"+txt));
    }//GEN-LAST:event_searchSaleDetailFieldKeyReleased

    private void searchProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchProductActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchProductActionPerformed

    private void searchProductKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchProductKeyReleased
        String txt = searchProduct.getText().toString();
        TableRowSorter trs = new TableRowSorter(productTable.getModel());
        productTable.setRowSorter(trs);
        trs.setRowFilter(RowFilter.regexFilter("(?i)"+txt));
    }//GEN-LAST:event_searchProductKeyReleased

    private void searchStoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchStoreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchStoreActionPerformed

    private void searchStoreKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchStoreKeyReleased
        String txt = searchStore.getText().toString();
        TableRowSorter trs = new TableRowSorter(storeTable.getModel());
        storeTable.setRowSorter(trs);
        trs.setRowFilter(RowFilter.regexFilter("(?i)"+txt));
    }//GEN-LAST:event_searchStoreKeyReleased

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        if(addProductButton.isEnabled()){
            addSellDetail();
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        if(removeProductButton.isEnabled()){
            deleteSellDetail();
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        if(removeProductButton.isEnabled()){
            deleteSellDetail();
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        clearAllFields();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void sellDetailTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sellDetailTableKeyReleased
         if(evt.getKeyCode()==38 || evt.getKeyCode()==40)
        {
            getSelectedRow();
        }
        else if(evt.getKeyCode()==37)
        {
            quaintityField.requestFocusInWindow();
        }
    }//GEN-LAST:event_sellDetailTableKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SellDetailNewFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SellDetailNewFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SellDetailNewFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SellDetailNewFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SellDetailNewFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addProductButton;
    private javax.swing.JLabel brokerNameLabel;
    private javax.swing.JLabel companyNameLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField priceField;
    private javax.swing.JTable productTable;
    private javax.swing.JSpinner quaintityField;
    private javax.swing.JLabel removeProductButton;
    private javax.swing.JLabel removeProductButton1;
    private javax.swing.JTextField searchProduct;
    private javax.swing.JTextField searchSaleDetailField;
    private javax.swing.JTextField searchStore;
    private javax.swing.JTable sellDetailTable;
    private javax.swing.JLabel sellIdLabel;
    private javax.swing.JTable storeTable;
    private javax.swing.JLabel totalAmountLabel;
    // End of variables declaration//GEN-END:variables

    private void fillProductTable() {
        ResultSet resultSet = new ProductDaoImpl().getAllProducts();
        productTable.setModel(DbUtils.resultSetToTableModel(resultSet));
    
        productTable.getColumnModel().getColumn(0).setWidth(0);
        productTable.getColumnModel().getColumn(0).setMinWidth(0);
        productTable.getColumnModel().getColumn(0).setMaxWidth(0);
        
        DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
        headerRenderer.setBackground(new Color(11, 18, 29));
        headerRenderer.setForeground(new Color(140, 198, 62));

        for (int i = 0; i < productTable.getModel().getColumnCount(); i++) {
            productTable.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
        productTable.setShowHorizontalLines(true);
        productTable.setShowVerticalLines(true);
        this.getContentPane().setBackground(Color.WHITE);
        jScrollPane1.getViewport().setBackground(Color.WHITE);        
    }

    private void getAllStoresWithProductId(Integer productId) {
        ResultSet resultSet = new StoreDetailDAOImpl().viewStoreDetailByProductId(productId);
        storeTable.setModel(DbUtils.resultSetToTableModel(resultSet));

        storeTable.getColumnModel().getColumn(0).setWidth(0);
        storeTable.getColumnModel().getColumn(0).setMinWidth(0);
        storeTable.getColumnModel().getColumn(0).setMaxWidth(0);
        
        DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
        headerRenderer.setBackground(new Color(11, 18, 29));
        headerRenderer.setForeground(new Color(140, 198, 62));

        for (int i = 0; i < storeTable.getModel().getColumnCount(); i++) {
            storeTable.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
        storeTable.setShowHorizontalLines(true);
        storeTable.setShowVerticalLines(true);
        this.getContentPane().setBackground(Color.WHITE);
        jScrollPane2.getViewport().setBackground(Color.WHITE);    
    }
    
    private void fillSellDetailTable(Integer sellId) {
        ResultSet resultSet = new SellDetailDAOImpl().getSellDetailBySellId(sellId);
        sellDetailTable.setModel(DbUtils.resultSetToTableModel(resultSet));
        
        Double totalAmount = new SellDetailDAOImpl().getTotalAmountBySellId(sellId);
        totalAmountLabel.setText(String.valueOf(totalAmount));
         
        sellDetailTable.getColumnModel().getColumn(0).setWidth(0);
        sellDetailTable.getColumnModel().getColumn(0).setMinWidth(0);
        sellDetailTable.getColumnModel().getColumn(0).setMaxWidth(0);
        
        sellDetailTable.getColumnModel().getColumn(1).setWidth(0);
        sellDetailTable.getColumnModel().getColumn(1).setMinWidth(0);
        sellDetailTable.getColumnModel().getColumn(1).setMaxWidth(0);
        
        DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
        headerRenderer.setBackground(new Color(11, 18, 29));
        headerRenderer.setForeground(new Color(140, 198, 62));

        for (int i = 0; i < sellDetailTable.getModel().getColumnCount(); i++) {
            sellDetailTable.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
        sellDetailTable.setShowHorizontalLines(true);
        sellDetailTable.setShowVerticalLines(true);
        this.getContentPane().setBackground(Color.WHITE);
        jScrollPane3.getViewport().setBackground(Color.WHITE);        
    }
    
    private void clearAllFields() {
        quaintityField.setValue(0);
        priceField.setText("");
        productTable.clearSelection();
        storeTable.clearSelection();
        sellDetailTable.clearSelection();
        fillStoreTable();
        disableButtons(1);
    }

    private void fillStoreTable() {
        ResultSet resultSet = new StoreDaoImpl().getAllStores();
        storeTable.setModel(DbUtils.resultSetToTableModel(resultSet));

        storeTable.getColumnModel().getColumn(0).setWidth(0);
        storeTable.getColumnModel().getColumn(0).setMinWidth(0);
        storeTable.getColumnModel().getColumn(0).setMaxWidth(0);
        
                DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
        headerRenderer.setBackground(new Color(11, 18, 29));
        headerRenderer.setForeground(new Color(140, 198, 62));

        for (int i = 0; i < storeTable.getModel().getColumnCount(); i++) {
            storeTable.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
        storeTable.setShowHorizontalLines(true);
        storeTable.setShowVerticalLines(true);
        this.getContentPane().setBackground(Color.WHITE);
        jScrollPane2.getViewport().setBackground(Color.WHITE);    
    }

    private void getSelectedRow() {
        String productName = (String) sellDetailTable.getValueAt(sellDetailTable.getSelectedRow(), 2);
        String storeName = (String) sellDetailTable.getValueAt(sellDetailTable.getSelectedRow(), 3);
        BigDecimal quantity =  (BigDecimal) sellDetailTable.getValueAt(sellDetailTable.getSelectedRow(), 4);
        BigDecimal price = (BigDecimal) sellDetailTable.getValueAt(sellDetailTable.getSelectedRow(), 5);
        quaintityField.setValue(quantity);
        priceField.setText(String.valueOf(price));
        sellDetailId = (Integer) sellDetailTable.getValueAt(sellDetailTable.getSelectedRow(), 0);
        StoreModel storeModel = new StoreDaoImpl().getStoreByName(storeName);
        fillStoreTable();
        disableButtons(0);
    }

    private void addSellDetail() {
        if(storeTable.getSelectedRow()<0 || productTable.getSelectedRow()<0)
        {
            new MessageForm("Error", "Product or store is not selected.","error.png").setVisible(true);
        }else if( priceField.getText().trim().equals(""))
        {
            new MessageForm("Error", "Quantity or price field is empty.","error.png").setVisible(true);
        }else{
            String storeName = (String) storeTable.getValueAt(storeTable.getSelectedRow(), 2);
            Integer storeDetailId = (Integer) storeTable.getValueAt(storeTable.getSelectedRow(), 0);
            String productName = (String) productTable.getValueAt(productTable.getSelectedRow(), 1);
            Integer productQuaintity = (Integer) storeTable.getValueAt(storeTable.getSelectedRow(), 3);
            Integer userQuaintity = (Integer) quaintityField.getValue();
            Integer productQty = userQuaintity;
            Double price = Double.parseDouble(priceField.getText());
            if(productQuaintity<userQuaintity)
            {
                new MessageForm("Error", "Quaintity not available in this store.","error.png").setVisible(true);
            }else{
                SellDetailModel sellDetailModel = new SellDetailModel();
                sellDetailModel.setQuaintity(userQuaintity);
                sellDetailModel.setPrice(price);
                Timestamp currentDate = new Timestamp(System.currentTimeMillis());
                sellDetailModel.setCreatedDate(currentDate);
                sellDetailModel.setModifiedDate(currentDate);
                StoreModel storeModel = new StoreDaoImpl().getStoreByName(storeName);
                ProductModel productModel = new ProductDaoImpl().getProductByProductName(productName);
                storeModel.setStoreId(storeModel.getStoreId());
                sellDetailModel.setProductModel(productModel);
                sellDetailModel.setStoreModel(storeModel);
                SellModel sellModel = new SellModel();
                sellModel.setSellId(sellId);
                sellDetailModel.setSellModel(sellModel);
                SellDetailModel sellDetailModelOne = new SellDetailDAOImpl().checkQuantityAvailabiltyBySellDetailId(sellDetailModel);
                if(sellDetailModelOne!=null)
                {
                    userQuaintity+= sellDetailModelOne.getQuaintity();
                    sellDetailModelOne.setQuaintity(userQuaintity);
                    Integer row = new SellDetailDAOImpl().updateSellDetail(sellDetailModelOne);
                    if(row>0)
                    {

                        StoreDetailsModel storeDetailsModel = new StoreDetailsModel();
                        storeDetailsModel.setProductModel(productModel);
                        storeDetailsModel.setStoreModel(storeModel);
                        storeDetailsModel.setModifiedDate(currentDate);
                        Integer remainingQuaintity = productQuaintity-productQty;
                        storeDetailsModel.setAvailableQuantity(remainingQuaintity);
                        new StoreDetailDAOImpl().updateAvailableQuainty(storeDetailsModel);
                        new MessageForm("Success", "Record has been added successfully.","info.png").setVisible(true);
                        fillSellDetailTable(sellId);
                        getAllStoresWithProductId(storeDetailsModel.getProductModel().getProductId());
                        Double amount = Double.valueOf(totalAmountLabel.getText());
                        sellModel.setModifiedDate(currentDate);
                        sellModel.setTotalAmount(amount);
                        new SellDAOImpl().updateSellRecordBySellId(sellModel);
                        sellFrame.fillSellTable();
                        clearAllFields();
                    }else{
                        new MessageForm("Error", "Record could not be added try again.","error.png").setVisible(true);
                    }
                }else{
                    Integer row = new SellDetailDAOImpl().addSellDetail(sellDetailModel);
                    if(row>0)
                    {
                        StoreDetailsModel storeDetailsModel = new StoreDetailsModel();
                        storeDetailsModel.setProductModel(productModel);
                        storeDetailsModel.setStoreModel(storeModel);
                        storeDetailsModel.setModifiedDate(currentDate);
                        Integer remainingQuaintity = productQuaintity-userQuaintity;
                        storeDetailsModel.setAvailableQuantity(remainingQuaintity);
                        new StoreDetailDAOImpl().updateAvailableQuainty(storeDetailsModel);
                        new MessageForm("Success", "Record has been added successfully.","info.png").setVisible(true);
                        fillSellDetailTable(sellId);
                        clearAllFields();
                        sellModel.setSellId(sellId);
                        Double amount = Double.valueOf(totalAmountLabel.getText());
                        sellModel.setModifiedDate(currentDate);
                        sellModel.setTotalAmount(amount);
                        new SellDAOImpl().updateSellRecordBySellId(sellModel);
                        getAllStoresWithProductId(storeDetailsModel.getProductModel().getProductId());
                        sellFrame.fillSellTable();
                    }else{
                        new MessageForm("Error", "Record could not be added try again.","error.png").setVisible(true);
                    }
                }
            }
        }
    }

    private void deleteSellDetail() {
        if(sellDetailTable.getSelectedRow()<0)
        {
            new MessageForm("Error", "Please select a row.","error.png").setVisible(true);
        }else{
            String productName = (String) sellDetailTable.getValueAt(sellDetailTable.getSelectedRow(), 2);
            String storeName = (String) sellDetailTable.getValueAt(sellDetailTable.getSelectedRow(), 3);
            BigDecimal quantity =  (BigDecimal) sellDetailTable.getValueAt(sellDetailTable.getSelectedRow(), 4);
            BigDecimal price = (BigDecimal) sellDetailTable.getValueAt(sellDetailTable.getSelectedRow(), 5);
            sellDetailId = (Integer) sellDetailTable.getValueAt(sellDetailTable.getSelectedRow(), 0);
            StoreModel storeModel = new StoreDaoImpl().getStoreByName(storeName);
            ProductModel productModel = new ProductDaoImpl().getProductByProductName(productName);
            fillProductTable();
            Integer qty = Integer.parseInt(quaintityField.getValue().toString());
            if(qty==0)
            {
                new MessageForm("Error", "Quantity or price field may be empty.","error.png").setVisible(true);
            }else{
                Integer userQuaintity = qty;
                Integer productQty = userQuaintity;
                SellDetailModel sellDetailModel = new SellDetailModel();
                Timestamp currentDate = new Timestamp(System.currentTimeMillis());
                sellDetailModel.setCreatedDate(currentDate);
                sellDetailModel.setModifiedDate(currentDate);
                sellDetailModel.setProductModel(productModel);
                sellDetailModel.setStoreModel(storeModel);
                SellModel sellModel = new SellModel();
                sellModel.setSellId(sellId);
                sellDetailModel.setSellModel(sellModel);
                SellDetailModel sellDetailModelOne = new SellDetailDAOImpl().checkQuantityAvailabiltyBySellDetailId(sellDetailModel);
                if(sellDetailModelOne!=null)
                {
                    userQuaintity= sellDetailModelOne.getQuaintity()-userQuaintity;
                    if(userQuaintity<0)
                    {
                        new MessageForm("Error", "Quantity not available.","error.png").setVisible(true);
                    }else{
                        sellDetailModelOne.setQuaintity(userQuaintity);
                        Integer row = new SellDetailDAOImpl().updateSellDetail(sellDetailModelOne);
                        if(row>0)
                        {
                            StoreDetailsModel storeDetailsModelOne = new StoreDetailsModel();
                            storeDetailsModelOne.setProductModel(new ProductDaoImpl().getProductByProductName(productName));
                            storeDetailsModelOne.setStoreModel(new StoreDaoImpl().getStoreByName(storeName));
                            StoreDetailsModel storeDetailsModel = new StoreDetailDAOImpl().checkProductStoreAvailabilty(storeDetailsModelOne);
                            if(storeDetailsModel!=null)
                            {
                                Integer addQty = storeDetailsModel.getAvailableQuantity()+productQty;
                                storeDetailsModel.setAvailableQuantity(addQty);
                            }
                            else{
                                Integer addQty = productQty;
                                storeDetailsModel.setAvailableQuantity(addQty);
                            }
                            storeDetailsModel.setProductModel(new ProductDaoImpl().getProductByProductName(productName));
                            storeDetailsModel.setStoreModel(new StoreDaoImpl().getStoreByName(storeName));
                            new StoreDetailDAOImpl().updateAvailableQuainty(storeDetailsModel);
                            new MessageForm("Success", "Record has been added successfully.","info.png").setVisible(true);
                            fillSellDetailTable(sellId);
                            fillProductTable();
                            clearAllFields();
                            Double amount = Double.valueOf(totalAmountLabel.getText());
                            sellModel.setModifiedDate(currentDate);
                            sellModel.setTotalAmount(amount);
                            new SellDAOImpl().updateSellRecordBySellId(sellModel);
                            sellFrame.fillSellTable();
                        }else{
                            new MessageForm("Error", "Record could not be added try again.","error.png").setVisible(true);
                        }
                    }
                }
            }
        }
    }
    
    private void disableButtons(Integer i) {
        if(i==0)
        {
            addProductButton.setEnabled(false);
            removeProductButton.setEnabled(true);
        }else if(i==1){
            addProductButton.setEnabled(true);
            removeProductButton.setEnabled(false);
        }
    }
}
