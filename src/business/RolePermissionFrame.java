/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package business;

import daoimpl.PermissionDAOImpl;
import daoimpl.RoleDaoImpl;
import daoimpl.RolePermissionDAOImpl;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import models.PermissionModel;
import models.RoleModel;
import models.RolePermissionModel;

/**
 *
 * @author Lenovo
 */
public class RolePermissionFrame extends javax.swing.JFrame {

    /**
     * Creates new form RolePermissionFrame
     */
    DefaultListModel assignedModel = new DefaultListModel();
    DefaultListModel unassignedModel = new DefaultListModel();
    ResultSet resultSet = null;
    Timestamp currentDate = new Timestamp(System.currentTimeMillis());
    String value = "";
    Integer op;
    
    public RolePermissionFrame() {
        initComponents();
        fillRoleComboBox();
        fillUnassignedPermissions();
        this.setLocationRelativeTo(null);
        disableButtons(1);
        this.setExtendedState(RolePermissionFrame.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        addSinglePermission = new javax.swing.JLabel();
        removeMultiplePermissions = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        assignedList = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        unassignedList = new javax.swing.JList<>();
        jLabel5 = new javax.swing.JLabel();
        roleComboBox = new javax.swing.JComboBox<>();
        addMultiplePermissions = new javax.swing.JLabel();
        removeSinglePermission = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel2MouseClicked(evt);
            }
        });
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        addSinglePermission.setBackground(new java.awt.Color(140, 198, 62));
        addSinglePermission.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        addSinglePermission.setForeground(new java.awt.Color(255, 255, 255));
        addSinglePermission.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addSinglePermission.setText(">");
        addSinglePermission.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addSinglePermission.setOpaque(true);
        addSinglePermission.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addSinglePermissionMouseClicked(evt);
            }
        });
        jPanel2.add(addSinglePermission, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 180, 110, 34));

        removeMultiplePermissions.setBackground(new java.awt.Color(140, 198, 62));
        removeMultiplePermissions.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        removeMultiplePermissions.setForeground(new java.awt.Color(255, 255, 255));
        removeMultiplePermissions.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        removeMultiplePermissions.setText("<<");
        removeMultiplePermissions.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        removeMultiplePermissions.setOpaque(true);
        removeMultiplePermissions.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeMultiplePermissionsMouseClicked(evt);
            }
        });
        jPanel2.add(removeMultiplePermissions, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 400, 110, 34));

        jLabel10.setBackground(new java.awt.Color(140, 198, 62));
        jLabel10.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Reset");
        jLabel10.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel10.setOpaque(true);
        jLabel10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel10MouseClicked(evt);
            }
        });
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 580, 300, 30));

        assignedList.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        assignedList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                assignedListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(assignedList);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 160, 290, 390));

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(140, 198, 62));
        jLabel3.setText("Select Role : ");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 70, 120, 32));

        jLabel4.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(140, 198, 40));
        jLabel4.setText("Unassigned Permissions");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 130, 210, 32));

        unassignedList.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        unassignedList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                unassignedListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(unassignedList);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 160, 280, 390));

        jLabel5.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(140, 198, 62));
        jLabel5.setText("Assigned Permissions");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 130, 190, 32));

        roleComboBox.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        roleComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Role" }));
        roleComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                roleComboBoxItemStateChanged(evt);
            }
        });
        jPanel2.add(roleComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 70, 220, 30));

        addMultiplePermissions.setBackground(new java.awt.Color(140, 198, 62));
        addMultiplePermissions.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        addMultiplePermissions.setForeground(new java.awt.Color(255, 255, 255));
        addMultiplePermissions.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addMultiplePermissions.setText(">>");
        addMultiplePermissions.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addMultiplePermissions.setOpaque(true);
        addMultiplePermissions.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addMultiplePermissionsMouseClicked(evt);
            }
        });
        jPanel2.add(addMultiplePermissions, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 250, 110, 34));

        removeSinglePermission.setBackground(new java.awt.Color(140, 198, 62));
        removeSinglePermission.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        removeSinglePermission.setForeground(new java.awt.Color(255, 255, 255));
        removeSinglePermission.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        removeSinglePermission.setText("<");
        removeSinglePermission.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        removeSinglePermission.setOpaque(true);
        removeSinglePermission.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeSinglePermissionMouseClicked(evt);
            }
        });
        jPanel2.add(removeSinglePermission, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 320, 110, 34));

        jLabel6.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 0, 0));
        jLabel6.setText("You need to sign in again to apply any changes.");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 10, -1, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 1360, 670));

        jPanel1.setBackground(new java.awt.Color(11, 18, 29));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(140, 192, 62));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Role Permissions");

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("X");
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(603, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(519, 519, 519)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1360, 70));

        jMenuBar1.setBackground(new java.awt.Color(0, 0, 0));

        jMenu1.setText("File");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Add single permission");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Add all permissions");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem8.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem8.setText("Delete single Permission");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem8);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Delete all Permissions");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("Reset");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setText("Back");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem7.setText("Exit");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem7);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addSinglePermissionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addSinglePermissionMouseClicked
           addSinglePermission();
    }//GEN-LAST:event_addSinglePermissionMouseClicked

    private void removeMultiplePermissionsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeMultiplePermissionsMouseClicked
       removeMultiplePermissions();
    }//GEN-LAST:event_removeMultiplePermissionsMouseClicked

    private void jLabel10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel10MouseClicked
        unassignedList.clearSelection();
        assignedList.clearSelection();
    }//GEN-LAST:event_jLabel10MouseClicked

    private void jPanel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseClicked
        
    }//GEN-LAST:event_jPanel2MouseClicked

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        this.dispose();
    }//GEN-LAST:event_jLabel2MouseClicked

    private void unassignedListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_unassignedListMouseClicked
        disableButtons(1);
    }//GEN-LAST:event_unassignedListMouseClicked

    private void roleComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_roleComboBoxItemStateChanged
        String roleType = roleComboBox.getSelectedItem().toString();
        if (roleType.equals("Select Role")) {
            fillUnassignedPermissions();
        } else {
            unassignedModel.clear();
            unassignedList.setModel(unassignedModel);
            assignedModel.clear();
            assignedList.setModel(assignedModel);
            resultSet = new RolePermissionDAOImpl().getAssignedPermissions(roleType);
            ResultSet resultSetTwo = new RolePermissionDAOImpl().getUnAssignedPermissions(roleType);
            try {
                while (resultSet.next()) {
                    assignedModel.addElement(resultSet.getString("Permission"));
                }
                while (resultSetTwo.next()) {
                    unassignedModel.addElement(resultSetTwo.getString("Permission"));
                }

            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            assignedList.setModel(assignedModel);
            unassignedList.setModel(unassignedModel);
        }
    }//GEN-LAST:event_roleComboBoxItemStateChanged

    private void addMultiplePermissionsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addMultiplePermissionsMouseClicked
        addMultiplePermissions();
    }//GEN-LAST:event_addMultiplePermissionsMouseClicked

    private void removeSinglePermissionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeSinglePermissionMouseClicked
        removeSinglePermission();
    }//GEN-LAST:event_removeSinglePermissionMouseClicked

    private void assignedListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_assignedListMouseClicked
        disableButtons(0);
    }//GEN-LAST:event_assignedListMouseClicked

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        if(unassignedList.getSelectedIndex()<0 || roleComboBox.getSelectedIndex()==0)
        {
            new MessageForm("Error", "Please select any Role or permission to add.", "error.png").setVisible(true);
        }
        else if(addSinglePermission.isEnabled()){
            addSinglePermission();
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        if(unassignedList.getSelectedIndex()<0 || roleComboBox.getSelectedIndex()==0)
        {
            new MessageForm("Error", "Please select any Role or permission to add.", "error.png").setVisible(true);
        }
        else if(addMultiplePermissions.isEnabled()){
            addMultiplePermissions();
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        if(assignedList.getSelectedIndex()<0 || roleComboBox.getSelectedIndex()==0)
        {
            new MessageForm("Error", "Please select any Role or permission to remove.", "error.png").setVisible(true);
        }
        else if(removeMultiplePermissions.isEnabled()){         
            removeMultiplePermissions();
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        clearAllFields();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        if(assignedList.getSelectedIndex()<0 || roleComboBox.getSelectedIndex()==0)
        {
                new MessageForm("Error", "Please select any Role or permission to remove.", "error.png").setVisible(true);
        }else
        if(removeSinglePermission.isEnabled()){         
            removeSinglePermission();
        }
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RolePermissionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RolePermissionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RolePermissionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RolePermissionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RolePermissionFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addMultiplePermissions;
    private javax.swing.JLabel addSinglePermission;
    private javax.swing.JList<String> assignedList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel removeMultiplePermissions;
    private javax.swing.JLabel removeSinglePermission;
    private javax.swing.JComboBox<String> roleComboBox;
    private javax.swing.JList<String> unassignedList;
    // End of variables declaration//GEN-END:variables

    
    private void fillUnassignedPermissions() {
        try {
            assignedModel.clear();
            assignedList.setModel(assignedModel);
            unassignedModel.clear();
            unassignedList.setModel(unassignedModel);
            ResultSet resultSet = new PermissionDAOImpl().getAllPermissions();
            int i = 0;
            while (resultSet.next()) {
                unassignedModel.addElement(resultSet.getString("Permissions"));
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        unassignedList.setModel(unassignedModel);
    }

    private void refreshPermissionLists() {
        String roleType = roleComboBox.getSelectedItem().toString();
        if (roleType.equals("Select Role")) {
            JOptionPane.showMessageDialog(this, "Please select role.");
        } else {
            unassignedModel.clear();
            unassignedList.setModel(unassignedModel);
            assignedModel.clear();
            assignedList.setModel(assignedModel);
            resultSet = new RolePermissionDAOImpl().getAssignedPermissions(roleType);
            ResultSet resultSetTwo = new RolePermissionDAOImpl().getUnAssignedPermissions(roleType);
            try {
                while (resultSet.next()) {
                    assignedModel.addElement(resultSet.getString("Permission"));
                }
                while (resultSetTwo.next()) {
                    unassignedModel.addElement(resultSetTwo.getString("Permission"));
                }

            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            assignedList.setModel(assignedModel);
            unassignedList.setModel(unassignedModel);
        }
    }

    private void clearAllFields() {
        roleComboBox.setSelectedIndex(0);
        fillUnassignedPermissions();
    }

    private void fillRoleComboBox() {
       ResultSet rs = new RoleDaoImpl().getAllRoles();
        try {
            while (rs.next()) {
                roleComboBox.addItem(rs.getString("Role"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(EmployeesFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void disableButtons(int i) {
        if(i==1)
        {
            addSinglePermission.setEnabled(true);
            addMultiplePermissions.setEnabled(true);
            removeSinglePermission.setEnabled(false);
            removeMultiplePermissions.setEnabled(false);
        }else if(i==0){
            addSinglePermission.setEnabled(false);
            addMultiplePermissions.setEnabled(false);
            removeSinglePermission.setEnabled(true);
            removeMultiplePermissions.setEnabled(true);
        }
    }

    private void addSinglePermission() {
        if(unassignedList.getSelectedIndex()<0 || roleComboBox.getSelectedIndex()==0)
           {
               new MessageForm("Error", "Please select role or permission to assign.", "error.png").setVisible(true);
           }else{
              String permission = unassignedList.getSelectedValue();
              String role = roleComboBox.getSelectedItem().toString();
              PermissionModel permissionModel = new PermissionDAOImpl().getPermissionByName(permission);
              RoleModel roleModel = new RoleDaoImpl().getRoleWithRoleName(role);
              RolePermissionModel rolePermissionModel = new RolePermissionModel();
              rolePermissionModel.setPermissionModel(permissionModel);
              rolePermissionModel.setRoleModel(roleModel);
              rolePermissionModel.setCreatedDate(currentDate);
              rolePermissionModel.setModifiedDate(currentDate);
              Integer row = new RolePermissionDAOImpl().addRolePermission(rolePermissionModel);
              if(row>0)
              {
                  new MessageForm("Success", "Permission has been assigned successfully.", "info.png").setVisible(true);
                  unassignedModel.removeElement(permission);
                  assignedModel.addElement(permission);
                  unassignedList.setModel(unassignedModel);
                  assignedList.setModel(assignedModel);
              }else{
                    new MessageForm("Error", "Could not assing Permission.", "error.png").setVisible(true);
              }
           }
           clearAllFields();
           disableButtons(1);
    }

    private void removeMultiplePermissions() {
         Integer row = 0;
         
         if(assignedList.getSelectedIndex()<0 || roleComboBox.getSelectedIndex()==0)
            {
                new MessageForm("Error", "Please select any Role or permission to remove.", "error.png").setVisible(true);
           }else{ 
              List<String> permissionsList = assignedList.getSelectedValuesList();
              String role = roleComboBox.getSelectedItem().toString();
              String permission ;
              for(String p : permissionsList)
              {
                    permission = p;
                    if(permission.equals("View_Role_Permission") && role.equals("admin"))
                    {
                        continue;
                    }
                    PermissionModel permissionModel = new PermissionDAOImpl().getPermissionByName(permission);
                    RoleModel roleModel = new RoleDaoImpl().getRoleWithRoleName(role);
                    RolePermissionModel rolePermissionModel = new RolePermissionModel();
                    rolePermissionModel.setPermissionModel(permissionModel);
                    rolePermissionModel.setRoleModel(roleModel);
                    rolePermissionModel.setModifiedDate(currentDate);
                    row =  new RolePermissionDAOImpl().deleteRolePermissionById(rolePermissionModel);
                    if(row>0)
                    {
                        assignedModel.removeElement(permission);
                        unassignedModel.addElement(permission);
                    }
              }
           }
           if(row>0)
           {
                new MessageForm("Success", "Permissions has been removed successfully.", "info.png").setVisible(true);
                unassignedList.setModel(unassignedModel);
                assignedList.setModel(assignedModel);
            }else{
                new MessageForm("Error", "Could not remove permissions.", "error.png").setVisible(true);
            }
           clearAllFields();
           disableButtons(1);
    }

    private void addMultiplePermissions() {
         Integer row = 0;   
           if(unassignedList.getSelectedIndex()<0 || roleComboBox.getSelectedIndex()==0)
           {
              new MessageForm("Error", "Please select any Role or permission to assign.", "error.png").setVisible(true);
           }else{
              List<String> permissionsList = unassignedList.getSelectedValuesList();
              String role = roleComboBox.getSelectedItem().toString();
              String permission ;
              for(String p : permissionsList)
              {
                    permission = p;
                    PermissionModel permissionModel = new PermissionDAOImpl().getPermissionByName(permission);
                    RoleModel roleModel = new RoleDaoImpl().getRoleWithRoleName(role);
                    RolePermissionModel rolePermissionModel = new RolePermissionModel();
                    rolePermissionModel.setPermissionModel(permissionModel);
                    rolePermissionModel.setRoleModel(roleModel);
                    rolePermissionModel.setCreatedDate(currentDate);
                    rolePermissionModel.setModifiedDate(currentDate);
                    row =  new RolePermissionDAOImpl().addRolePermission(rolePermissionModel);
                    if(row>0)
                    {
                        unassignedModel.removeElement(permission);
                        assignedModel.addElement(permission);
                    }
              }
              unassignedList.setModel(unassignedModel);
              assignedList.setModel(assignedModel);
           }
           if(row>0)
           {
                new MessageForm("Success", "Permissions has been assigned successfully.", "info.png").setVisible(true);
           }
           else
           {
               new MessageForm("Error", "Could not assign permission.", "error.png").setVisible(true);
           }
           clearAllFields();
           disableButtons(1);
    }

    private void removeSinglePermission() {
          if(assignedList.getSelectedIndex()<0 || roleComboBox.getSelectedIndex()==0)
           {
               new MessageForm("Error", "Please select any Role or permission to remove.", "error.png").setVisible(true);
           }else{
              String permission = assignedList.getSelectedValue();
              String role = roleComboBox.getSelectedItem().toString();
              if(permission.equals("View_Role_Permission") && role.equals("admin"))
              {
                  new MessageForm("Error", "You can not remove this permission.", "error.png").setVisible(true);
              }else{
                PermissionModel permissionModel = new PermissionDAOImpl().getPermissionByName(permission);
                RoleModel roleModel = new RoleDaoImpl().getRoleWithRoleName(role);
                RolePermissionModel rolePermissionModel = new RolePermissionModel();
                rolePermissionModel.setPermissionModel(permissionModel);
                rolePermissionModel.setRoleModel(roleModel);
                rolePermissionModel.setModifiedDate(currentDate);
                Integer row = new RolePermissionDAOImpl().deleteRolePermissionById(rolePermissionModel);
                if(row>0)
                {
                    new MessageForm("Error", "Permission has been removed successfully.", "info.png").setVisible(true);
                    assignedModel.removeElement(permission);
                    unassignedModel.addElement(permission);
                    unassignedList.setModel(unassignedModel);
                    assignedList.setModel(assignedModel);
                }else{
                    new MessageForm("Error", "Could not remove permissions.", "error.png").setVisible(true);
                }  
              }
           }
           clearAllFields();
           disableButtons(1);
    }
}
