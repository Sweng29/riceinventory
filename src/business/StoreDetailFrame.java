/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package business;

import daoimpl.ProductDaoImpl;
import daoimpl.StoreDaoImpl;
import daoimpl.StoreDetailDAOImpl;
import business.MessageForm;
import java.awt.Color;
import java.sql.ResultSet;
import java.sql.Timestamp;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import models.ProductModel;
import models.StoreDetailsModel;
import models.StoreModel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Lenovo
 */
public class StoreDetailFrame extends javax.swing.JFrame {

    /**
     * Creates new form StoreDetailFrame
     */
    Integer storeId;
    public StoreDetailFrame() {
        initComponents();
        disableButtons(1);
        this.setLocationRelativeTo(null);
    }
    
    public StoreDetailFrame(Integer storeId) {
        initComponents();
        this.storeId = storeId;
        populateStoreDetailTable(storeId);
        fillProductTable();
        disableButtons(1);
        this.setLocationRelativeTo(null);
        storeDetailTable.setDefaultEditor(Object.class, null);
        this.setExtendedState(StoreDetailFrame.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        deletePopUpMenu = new javax.swing.JPopupMenu();
        deleteMenuItem = new javax.swing.JMenuItem();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        addStoreDetailButton = new javax.swing.JLabel();
        clearFieldsButton = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrolPane = new javax.swing.JScrollPane();
        storeDetailTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        searchStoreField = new javax.swing.JTextField();
        availableQuaintityField = new javax.swing.JFormattedTextField();
        updateStoreDetailButton = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();

        deleteMenuItem.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        deleteMenuItem.setText("Delete Row");
        deleteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMenuItemActionPerformed(evt);
            }
        });
        deletePopUpMenu.add(deleteMenuItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel3.setBackground(new java.awt.Color(0, 0, 0));
        jPanel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel3MouseClicked(evt);
            }
        });
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("X");
        jLabel3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1310, 10, 23, -1));

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(140, 198, 62));
        jLabel1.setText("Store Detail");
        jPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 10, -1, -1));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel2MouseClicked(evt);
            }
        });
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel5.setText("Available Qty :");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 420, 140, 40));

        addStoreDetailButton.setBackground(new java.awt.Color(140, 198, 62));
        addStoreDetailButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        addStoreDetailButton.setForeground(new java.awt.Color(255, 255, 255));
        addStoreDetailButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addStoreDetailButton.setText("Add Store Detail");
        addStoreDetailButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addStoreDetailButton.setOpaque(true);
        addStoreDetailButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addStoreDetailButtonMouseClicked(evt);
            }
        });
        jPanel2.add(addStoreDetailButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 510, 170, 40));

        clearFieldsButton.setBackground(new java.awt.Color(140, 198, 62));
        clearFieldsButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        clearFieldsButton.setForeground(new java.awt.Color(255, 255, 255));
        clearFieldsButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        clearFieldsButton.setText("Clear Fields");
        clearFieldsButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        clearFieldsButton.setOpaque(true);
        clearFieldsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearFieldsButtonMouseClicked(evt);
            }
        });
        jPanel2.add(clearFieldsButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 570, 370, 40));

        jLabel8.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel8.setText("Product Record");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, -1, -1));

        storeDetailTable.setAutoCreateRowSorter(true);
        storeDetailTable.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        storeDetailTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        storeDetailTable.setRowHeight(20);
        storeDetailTable.setSelectionBackground(new java.awt.Color(0, 0, 0));
        storeDetailTable.setSelectionForeground(new java.awt.Color(140, 168, 62));
        storeDetailTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                storeDetailTableMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                storeDetailTableMouseReleased(evt);
            }
        });
        storeDetailTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                storeDetailTableKeyReleased(evt);
            }
        });
        jScrolPane.setViewportView(storeDetailTable);

        jPanel2.add(jScrolPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 110, 830, 540));

        jLabel6.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Search Store Detail");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 60, 180, 40));

        searchStoreField.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        searchStoreField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchStoreFieldActionPerformed(evt);
            }
        });
        searchStoreField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchStoreFieldKeyReleased(evt);
            }
        });
        jPanel2.add(searchStoreField, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 60, 360, 40));

        availableQuaintityField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("+92-##########"))));
        availableQuaintityField.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        availableQuaintityField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                availableQuaintityFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                availableQuaintityFieldKeyTyped(evt);
            }
        });
        jPanel2.add(availableQuaintityField, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 420, 280, 40));

        updateStoreDetailButton.setBackground(new java.awt.Color(140, 198, 62));
        updateStoreDetailButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        updateStoreDetailButton.setForeground(new java.awt.Color(255, 255, 255));
        updateStoreDetailButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        updateStoreDetailButton.setText("Update Store Detail");
        updateStoreDetailButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        updateStoreDetailButton.setOpaque(true);
        updateStoreDetailButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateStoreDetailButtonMouseClicked(evt);
            }
        });
        jPanel2.add(updateStoreDetailButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 510, 180, 40));

        productTable.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        productTable.setRowHeight(20);
        productTable.setSelectionBackground(new java.awt.Color(140, 198, 62));
        productTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        productTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                productTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(productTable);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 460, 260));

        jLabel9.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel9.setText("Store Detail Record");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 80, -1, -1));

        jMenuBar1.setBackground(new java.awt.Color(0, 0, 0));

        jMenu1.setText("File");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Add");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Update");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Delete");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("Reset");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setText("Back");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem7.setText("Exit");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem7);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 1365, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 698, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        this.dispose();
    }//GEN-LAST:event_jLabel3MouseClicked

    private void jPanel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseClicked
        disableButtons(1);
        clearAllFields();
    }//GEN-LAST:event_jPanel3MouseClicked

    private void addStoreDetailButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addStoreDetailButtonMouseClicked
        addStoreDetail();
    }//GEN-LAST:event_addStoreDetailButtonMouseClicked

    private void clearFieldsButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearFieldsButtonMouseClicked
        clearAllFields();
    }//GEN-LAST:event_clearFieldsButtonMouseClicked

    private void storeDetailTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_storeDetailTableMouseClicked
        getSelectedRow();
    }//GEN-LAST:event_storeDetailTableMouseClicked

    private void searchStoreFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchStoreFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchStoreFieldActionPerformed

    private void searchStoreFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchStoreFieldKeyReleased
        String txt = searchStoreField.getText().toString();
        TableRowSorter trs = new TableRowSorter(storeDetailTable.getModel());
        storeDetailTable.setRowSorter(trs);
        trs.setRowFilter(RowFilter.regexFilter("(?i)"+txt));
    }//GEN-LAST:event_searchStoreFieldKeyReleased

    private void jPanel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseClicked
        disableButtons(1);
        clearAllFields();
    }//GEN-LAST:event_jPanel2MouseClicked

    private void availableQuaintityFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_availableQuaintityFieldKeyTyped
        char ch = evt.getKeyChar();
        if(Character.isAlphabetic(ch) || Character.isWhitespace(ch))
        {
            evt.consume();
        }
    }//GEN-LAST:event_availableQuaintityFieldKeyTyped

    private void availableQuaintityFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_availableQuaintityFieldKeyReleased

    }//GEN-LAST:event_availableQuaintityFieldKeyReleased

    private void updateStoreDetailButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateStoreDetailButtonMouseClicked
        updateStoreDetail(); 
    }//GEN-LAST:event_updateStoreDetailButtonMouseClicked

    private void storeDetailTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_storeDetailTableMouseReleased
        if (evt.isPopupTrigger()) {
           deletePopUpMenu.show(storeDetailTable, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_storeDetailTableMouseReleased

    private void deleteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMenuItemActionPerformed
        deleteStoreDetail();
    }//GEN-LAST:event_deleteMenuItemActionPerformed

    private void productTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productTableMouseClicked
       Integer productId = (Integer) productTable.getValueAt(productTable.getSelectedRow(), 0);
    }//GEN-LAST:event_productTableMouseClicked

    private void storeDetailTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_storeDetailTableKeyReleased
        if(evt.getKeyCode()==38 || evt.getKeyCode()==40)
        {
            getSelectedRow();
        }
        else if(evt.getKeyCode()==37)
        {
            availableQuaintityField.requestFocusInWindow();
        }
    }//GEN-LAST:event_storeDetailTableKeyReleased

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        if(addStoreDetailButton.isEnabled()){
            addStoreDetail();
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        if(updateStoreDetailButton.isEnabled()){
            updateStoreDetail();
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        deleteStoreDetail();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        clearAllFields();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StoreDetailFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StoreDetailFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StoreDetailFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StoreDetailFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StoreDetailFrame().setVisible(true);
            }
        });
    }
    
    private void populateStoreDetailTable(Integer storeId) {
        ResultSet resultSet = new StoreDetailDAOImpl().viewStoreDetailById(storeId);
        storeDetailTable.setModel(DbUtils.resultSetToTableModel(resultSet));
        
        storeDetailTable.getColumnModel().getColumn(0).setWidth(0);
        storeDetailTable.getColumnModel().getColumn(0).setMinWidth(0);
        storeDetailTable.getColumnModel().getColumn(0).setMaxWidth(0);
        
        DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
        headerRenderer.setBackground(new Color(11, 18, 29));
        headerRenderer.setForeground(new Color(140, 198, 62));

        for (int i = 0; i < storeDetailTable.getModel().getColumnCount(); i++) {
            storeDetailTable.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
        storeDetailTable.setShowHorizontalLines(true);
        storeDetailTable.setShowVerticalLines(true);
        this.getContentPane().setBackground(Color.WHITE);
        jScrolPane.getViewport().setBackground(Color.WHITE);
    }

    private void clearAllFields() {
        availableQuaintityField.setText("");
        storeDetailTable.clearSelection();
        productTable.clearSelection();
        disableButtons(1);
    }

    private void disableButtons(Integer i) {
        if(i==0)
        {
            addStoreDetailButton.setEnabled(false);
            updateStoreDetailButton.setEnabled(true);
        }else if(i==1){
            addStoreDetailButton.setEnabled(true);
            updateStoreDetailButton.setEnabled(false);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addStoreDetailButton;
    private javax.swing.JFormattedTextField availableQuaintityField;
    private javax.swing.JLabel clearFieldsButton;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JPopupMenu deletePopUpMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrolPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable productTable;
    private javax.swing.JTextField searchStoreField;
    private javax.swing.JTable storeDetailTable;
    private javax.swing.JLabel updateStoreDetailButton;
    // End of variables declaration//GEN-END:variables


    private void fillProductTable() {
    
        DefaultTableModel dtm = new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row , int column){
                return false;
            }
        };
        
        dtm = (DefaultTableModel) DbUtils.resultSetToTableModel(new ProductDaoImpl().getAllProducts());
        
        productTable.setModel(dtm);
        
        productTable.getColumnModel().getColumn(0).setWidth(0);
        productTable.getColumnModel().getColumn(0).setMinWidth(0);
        productTable.getColumnModel().getColumn(0).setMaxWidth(0);

        DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
        headerRenderer.setBackground(new Color(11, 18, 29));
        headerRenderer.setForeground(new Color(140, 198, 62));

        for (int i = 0; i < productTable.getModel().getColumnCount(); i++) {
            productTable.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
        productTable.setShowHorizontalLines(true);
        productTable.setShowVerticalLines(true);
        this.getContentPane().setBackground(Color.WHITE);
        jScrollPane1.getViewport().setBackground(Color.WHITE);
    }

    private void getSelectedRow() {
        Integer storeDetailsId = (Integer) storeDetailTable.getValueAt(storeDetailTable.getSelectedRow(), 0);
        productTable.clearSelection();
        String productName = (String) storeDetailTable.getValueAt(storeDetailTable.getSelectedRow(), 1);
        for(int i=0;i<productTable.getRowCount();i++)
        {
            String product = (String) productTable.getValueAt(i, 1);
            if(product.equals(productName))
            {
                productTable.setRowSelectionInterval(i,i);
                break;
            }
        }
        Integer productId = (Integer) productTable.getValueAt(productTable.getSelectedRow(), 0);
        StoreDetailsModel storeDetailsModel = new StoreDetailDAOImpl().getStoreDetailById(storeDetailsId);
        availableQuaintityField.setText(String.valueOf(storeDetailsModel.getAvailableQuantity()));
        disableButtons(0);
    }

    private void addStoreDetail() {
        Integer productId=null;
        if(productTable.getSelectedRow()==-1)
        {
            System.out.println("Exception");
        }else{
            productId = (Integer) productTable.getValueAt(productTable.getSelectedRow(), 0); 
        }        
        if(availableQuaintityField.getText().trim().equals("") || productId==null)
        {
            new MessageForm("Error","Please fill all fields to add record.","error.png").setVisible(true);
        }else{
            StoreDetailsModel storeDetailsModel = new StoreDetailsModel();
            ProductModel productModel = new ProductDaoImpl().getProductByProductId(productId);
            StoreModel storeModel = new StoreDaoImpl().getStoreById(storeId);
            StoreDetailsModel storeDetails = new StoreDetailsModel();
            storeDetails.setProductModel(productModel);
            storeDetails.setStoreModel(storeModel);
            storeDetailsModel.setAvailableQuantity(Integer.parseInt(availableQuaintityField.getText()));
            Timestamp currentTime = new Timestamp(System.currentTimeMillis());
            storeDetailsModel.setProductModel(productModel);
            storeDetailsModel.setStoreModel(storeModel);
            storeDetailsModel.setCreatedDate(currentTime);
            storeDetailsModel.setModifiedDate(currentTime);
            StoreDetailsModel checkAvailability = new StoreDetailDAOImpl().checkProductStoreAvailabilty(storeDetails);             
            if(checkAvailability!=null)
            {
                Integer amountAvail = checkAvailability.getAvailableQuantity();
                Integer availableQuaintity = Integer.parseInt(availableQuaintityField.getText())+amountAvail;
                storeDetailsModel.setAvailableQuantity(availableQuaintity);
                boolean check = new StoreDetailDAOImpl().updateAvailableQuainty(storeDetailsModel);
                if(check)
                {
                    new MessageForm("Error", "Record could not be updated try again.","error.png").setVisible(true);
                }else{
                    new MessageForm("Success", "Record has been updated.","info.png").setVisible(true);
                    clearAllFields();
                    populateStoreDetailTable(storeId);
                }
            }else{
                    boolean check = new StoreDetailDAOImpl().addStoreDetail(storeDetailsModel);
                    if(check)
                    {
                        new MessageForm("Error", "Record could not be added try again.","error.png").setVisible(true);
                    }else{
                        new MessageForm("Success", "Record has been added.","info.png").setVisible(true);
                        clearAllFields();
                        populateStoreDetailTable(storeId);
                    }
                }
        }
    }

    private void updateStoreDetail() {
        if(storeDetailTable.getSelectedRow()>-1)
        {
            String productName = (String) productTable.getValueAt(productTable.getSelectedRow(), 1);
        if(availableQuaintityField.getText().trim().equals("") || productName==null)
        {
            new MessageForm("Error","Please fill all fields to update record.","error.png").setVisible(true);
        }else{
                Integer storeDetailsId = (Integer) storeDetailTable.getValueAt(storeDetailTable.getSelectedRow(), 0);
                StoreDetailsModel storeDetailsModel = new StoreDetailsModel();
                ProductModel productModel = new ProductDaoImpl().getProductByProductName(productName);
                StoreModel storeModel = new StoreDaoImpl().getStoreById(storeId);
                Integer availQty = (Integer) storeDetailTable.getModel().getValueAt(storeDetailTable.getSelectedRow(), 3);
                Integer givenQty; 
                Integer totalQty;
                givenQty = Integer.parseInt(availableQuaintityField.getText());
                totalQty = givenQty+availQty;
                if(totalQty<0)
                {
                    new MessageForm("Error", "Product can not be less then zero.","error.png").setVisible(true);
                }else{
                    Timestamp currentTime = new Timestamp(System.currentTimeMillis());
                    storeDetailsModel.setProductModel(productModel);
                    storeDetailsModel.setStoreModel(storeModel);
                    storeDetailsModel.setModifiedDate(currentTime);
                    storeDetailsModel.setAvailableQuantity(totalQty);
                    storeDetailsModel.setStoreDetailId(storeDetailsId);
                    boolean check = new StoreDetailDAOImpl().updateStoreDetail(storeDetailsModel);
                    if(check)
                    {
                        new MessageForm("Error", "Record could not be updated try again.","error.png").setVisible(true);
                    }else{
                        new MessageForm("Success", "Record has been updated.","info.png").setVisible(true);
                        clearAllFields();
                        populateStoreDetailTable(storeId);
                    }
                }
            }
        }else{
                new MessageForm("Error", "Please select a record to update.","error.png").setVisible(true);
        }
    }

    private void deleteStoreDetail() {
        if(storeDetailTable.getSelectedRow()>-1)
        {
            Integer storeDetailId = (Integer) storeDetailTable.getValueAt(storeDetailTable.getSelectedRow(), 0);
            StoreDetailsModel storeDetailsModel = new StoreDetailsModel();
            storeDetailsModel.setStoreDetailId(storeDetailId);
            Timestamp modifiedDate = new Timestamp(System.currentTimeMillis());
            storeDetailsModel.setModifiedDate(modifiedDate);
            boolean row = new StoreDetailDAOImpl().deleteStoreDetailById(storeDetailsModel);
            if (row) {
                new MessageForm("Error","Could not delete record,try again.","error.png").setVisible(true);
            } else {
                new MessageForm("Success","Record has been deleted successfully.","info.png").setVisible(true);
                populateStoreDetailTable(storeId);
                clearAllFields();
                disableButtons(1);
            }
        }else{
            new MessageForm("Error","Please select a row to delete.","error.png").setVisible(true);
        }
    }
}
